/*****************************************************************************\
* BugEngine                                                                   *
* Copyright (C) 2005-2008  screetch <screetch@gmail.com>                      *
*                                                                             *
* This library is free software; you can redistribute it and/or modify it     *
* under the terms of the GNU Lesser General Public License as published by    *
* the Free Software Foundation; either version 2.1 of the License, or (at     *
* your option) any later version.                                             *
*                                                                             *
* This library is distributed in the hope that it will be useful, but WITHOUT *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public        *
* License for more details.                                                   *
*                                                                             *
* You should have received a copy of the GNU Lesser General Public License    *
* along with this library; if not, write to                                   *
* the Free Software Foundation, Inc.,                                         *
* 51 Franklin St,                                                             *
* Fifth Floor,                                                                *
* Boston, MA 02110-1301                                                       *
* USA                                                                         *
\*****************************************************************************/

#ifndef BE_MINITL_INTERLOCKED_STACK_
#define BE_MINITL_INTERLOCKED_STACK_
/*****************************************************************************/

namespace minitl
{

struct inode
{
    iptr<inode> next;
};

template< typename T >
class istack
{
private:
    itaggedptr<inode> m_head;
public:
    istack();
    ~istack();

    void    push(T* t);
    T*      pop();
};

template< typename T >
istack<T>::istack()
:   m_head()
{
}

template< typename T>
istack<T>::~istack()
{
}

template< typename T >
void istack<T>::push(T* t)
{
    Assert(((size_t)t & 15) == 0);
    itaggedptr<inode>::Ticket ticket;
    do
    {
        ticket = m_head.getTicket();
        t->next = static_cast<T*>((inode*)m_head);
    } while(!m_head.setConditional(t, ticket));
}

template< typename T >
T* istack<T>::pop()
{
    itaggedptr<inode>::Ticket ticket;
    T* result;
    do
    {
        ticket = m_head.getTicket();
        result = static_cast<T*>((inode*)m_head);
    }
    while(!m_head.setConditional((inode*)result->next, ticket));
    Assert(((size_t)result & 15) == 0);
    return result;
}

}

/*****************************************************************************/
#endif
