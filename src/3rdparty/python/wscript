from waflib import Errors, Utils, Options
from waflib.Configure import conf
import sys

@conf
def python_config(conf, version, var=''):
    version_number = version.replace('.', '')
    if not var: var = '3rdparty.python%s'%(version_number)
    if 'macosx' in conf.env.VALID_PLATFORMS:
        py_config = conf.find_program('python%s-config'%version, var='PYTHON_CONFIG')
        if not py_config:
            raise Errors.WafError('python-config for python %s not found' % version)
        del conf.env.PYTHON_CONFIG
        var = (conf.env.ENV_PREFIX + '/' + var) if conf.env.ENV_PREFIX else var
        command = [py_config, '--includes']
        p = Utils.subprocess.Popen(command, stdin=Utils.subprocess.PIPE, stdout=Utils.subprocess.PIPE)
        out,err = p.communicate()
        if p.returncode != 0:
            if not isinstance(err, str):
                err = err.decode(sys.stdout.encoding or 'iso8859-1')
            raise Errors.WafError('could not run %s: %s' % (command, err))
        if not isinstance(out, str):
            out = out.decode(sys.stdout.encoding or 'iso8859-1')
        includes = out.split()

        command = [py_config, '--ldflags']
        p = Utils.subprocess.Popen(command, stdin=Utils.subprocess.PIPE, stdout=Utils.subprocess.PIPE)
        out,err = p.communicate()
        if p.returncode != 0:
            if not isinstance(err, str):
                err = err.decode(sys.stdout.encoding or 'iso8859-1')
            raise Errors.WafError('could not run %s: %s' % (command, err))
        if not isinstance(out, str):
            out = out.decode(sys.stdout.encoding or 'iso8859-1')
        ldflags = out.split()

        conf.env['CFLAGS_%s'%var] = includes
        conf.env['CXXFLAGS_%s'%var] = includes
        conf.env['LINKFLAGS_%s'%var] = ldflags
    elif 'posix' in conf.env.VALID_PLATFORMS:
        conf.pkg_config('python-%s'%version, var=var)
    elif 'windows' in conf.env.VALID_PLATFORMS:
        conf.recurse('../python%s' % version_number, name='setup')
    else:
        raise Errors.WafError('TODO')

def options(opt):
    gr = opt.add_option_group('configure options')
    gr.add_option('--python-versions',
                  action='store',
                  dest='python_versions',
                  help='List of Python version to support in plugins',
                  default='2.5,2.6,2.7,3.0,3.1,3.2,3.3,3.4,3.5')

def setup(conf):
    for version in Options.options.python_versions.split(','):
        try:
            conf.python_config(version)
        except Errors.WafError:
            pass
        else:
            conf.env.append_unique('FEATURES', 'python%s'%version)
            conf.detected.append('Python %s'%version)

def build(bld):
    bld.env.PYTHON_VERSIONS = Options.options.python_versions.split(',')
    for version in bld.env.PYTHON_VERSIONS:
        try:
            bld.recurse('../python%s' % version.replace('.', ''))
        except:
            pass
