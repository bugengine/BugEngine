#set general options for building

import os
import re
from waflib.TaskGen import taskgen_method,feature,before,after,extension
from waflib import Options,Task,Node,Errors
import mak
from mak import module
from waflib.Logs import pprint

from mak.tools.IDE import visualstudio,netbeans,xcode


def options(opt):
	opt.recurse(os.path.join('host', os.name))
	for l in 'platforms','archs':
		for target in os.listdir(os.path.join('mak', 'target', l)):
			if target not in ['.svn', '.cvs']:
				opt.recurse(os.path.join('target', l, target))
	if os.path.isdir('extra'):
		for f in os.listdir('extra'):
			if f in ['.svn', '.cvs']:
				continue
			if os.path.isdir(os.path.join('extra', f)) and os.path.isfile(os.path.join('extra', f, 'wscript')):
				opt.recurse(os.path.join('..', 'extra', f))
	opt.add_option( '--projects',
					action='store',
					default='',
					help='build projects for the selected IDEs')
	opt.add_option( '--toolchains',
					action='store',
					default='',
					help='build for the selected toolchains')
	opt.add_option( '--master',
					action='store_true',
					default=True,
					help='build with master files')

def configure(conf):
	conf.env['ARCHITECTURES']	= mak.allarchs

	conf.recurse(os.path.join('host', os.name))
	for platform in os.listdir(os.path.join('mak', 'target', 'platforms')):
			if platform not in ['.svn', '.cvs']:
				pprint('BLUE', '==================================')
				pprint('BLUE', '= configure for target '+platform)
				conf.recurse(os.path.join('target', 'platforms', platform))
	if os.path.isdir('extra'):
		for f in os.listdir('extra'):
			if f in ['.svn', '.cvs']:
				continue
			if os.path.isdir(os.path.join('extra', f)) and os.path.isfile(os.path.join('extra', f, 'wscript')):
				pprint('BLUE', '==================================')
				pprint('BLUE', '= configure for target '+f)
				conf.recurse(os.path.join('..', 'extra', f))

	if len(conf.env['BUILD_VARIANTS']) == 0:
		raise SystemExit("no match found : make sure you selected a valid toolchain")
	conf.env['DEFAULT_BUILD_TOOL'] = conf.env['BUILD_VARIANTS'][-1]

	selectedvariants = []
	for optim in mak.alloptims:
		for envname in conf.env['BUILD_VARIANTS']:
			name = optim+'-'+envname
			conf.setenv(name, conf.all_envs[envname])
			conf.env['OPTIMISATION'] = optim
			conf.env['PREFIX'] = name
			selectedvariants.append(name)

	conf.variant = ''
	conf.env['BUILD_VARIANTS'] = selectedvariants

	if Options.options.toolchains:
		conf.env['SELECTED_TOOLCHAINS'] = Options.options.toolchains
		selectedtoolchains = [re.compile(selected) for selected in conf.env['SELECTED_TOOLCHAINS'].split(',')]
		allvariants = conf.env['BUILD_VARIANTS']
		selectedvariants = []
		for v in allvariants:
			for e in selectedtoolchains:
				if e.match(v):
					pprint('GREEN', 'selected variant %s for build' % v)
					selectedvariants.append(v)
		if not selectedvariants:
			conf.fatal('No toolchain matches the pattern %s, available : %s' % (Options.options.toolchains,str(allvariants)))
	else:
		conf.env['SELECTED_TOOLCHAINS'] = 'debug-'+conf.env['DEFAULT_BUILD_TOOL']
		pprint('GREEN', 'selected variant %s for build' % str(conf.env['SELECTED_TOOLCHAINS']))


def build(bld):
	for l in 'platforms','archs':
		for target in os.listdir(os.path.join('mak', 'target', l)):
			if target not in ['.svn', '.cvs']:
				bld.recurse(os.path.join('target', l, target))
	if os.path.isdir('extra'):
		for target in os.listdir(os.path.join('extra')):
			if target not in ['.svn', '.cvs']:
				bld.recurse(os.path.join('..', 'extra', target))
	if not Options.options.toolchains:
		Options.options.toolchains = bld.env['SELECTED_TOOLCHAINS']
	selectedtoolchains = [re.compile(selected) for selected in Options.options.toolchains.split(',')]
	selectedvariants = []
	if Options.options.projects:
		bld.env['PROJECTS'] = Options.options.projects.split(',')
	else:
		allvariants = bld.env['BUILD_VARIANTS']
		for v in allvariants:
			for e in selectedtoolchains:
				if e.match(v):
					selectedvariants.append(v)
					pprint('GREEN', 'selected variant %s for build' % v)
	bld.env['BUILD_VARIANTS'] = selectedvariants
	global builder
	mak.builder = bld

@extension('.m')
def m_hook(self, node):
	"""Alias .m files to be compiled the same as .c files, gcc will do the right thing."""
	return self.create_compiled_task('c', node)

@extension('.mm')
def mm_hook(self, node):
	"""Alias .m files to be compiled the same as .cxx files, gcc will do the right thing."""
	return self.create_compiled_task('cxx', node)

@taskgen_method
@feature('c','cxx')
@before('apply_core')
def filter_sources(self):
	v = self.env
	self.source = self.to_list(self.source)
	rejectedsources = []
	self.allsources = {}
	for source in self.source:
		head,tail = os.path.split(source.abspath())
		while tail:
			head,tail = os.path.split(head)
			if tail[0:5] == 'arch=':
				archs=set(tail[5:].split(','))
				if not v['ARCHITECTURE'] in archs:
					try: self.allsources[tail].append(source)
					except KeyError: self.allsources[tail] = [source]
					rejectedsources.append(source)
					continue
			if tail[0:9] == 'platform=':
				platforms=set(tail[9:].split(','))
				if not set(v['PLATFORM']) & platforms:
					try: self.allsources[tail].append(source)
					except KeyError: self.allsources[tail] = [source]
					rejectedsources.append(source)
					continue
	for src in rejectedsources:
		self.source.remove(src)

@taskgen_method
@feature('cobjects')
def add_cobjects_method(self):
	pass

