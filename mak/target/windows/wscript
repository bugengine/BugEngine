from waflib import Errors, Logs
from waflib.Configure import conf
from waflib.TaskGen import feature, before_method, after_method
import os

@conf
def set_windows_options(self):
	self.env.VALID_PLATFORMS = ['windows', 'pc']
	self.env.LINK_WITH_PROGRAM = True

	self.env.DEPLOY_BINDIR = ''
	self.env.DEPLOY_RUNBINDIR = ''
	self.env.DEPLOY_LIBDIR = 'lib'
	self.env.DEPLOY_INCLUDEDIR = 'include'
	self.env.DEPLOY_DATADIR = 'data'
	self.env.DEPLOY_PLUGINDIR = 'data/plugin'
	self.env.DEPLOY_KERNELDIR = 'data/kernel'

@conf
def set_windows_msvc_options(self):
	self.env.CFLAGS.append('/D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE=1')
	self.env.CXXFLAGS.append('/D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE=1')
	self.env.CFLAGS_warnall = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W4', '/WX']
	self.env.CFLAGS_warnnone = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W0']
	self.env.CXXFLAGS_warnall = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W4', '/WX']
	self.env.CXXFLAGS_warnnone = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W0']

	self.env.CFLAGS_debug = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG']
	self.env.CXXFLAGS_debug = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG', '/GR']
	self.env.LINKFLAGS_debug = ['/DEBUG']
	self.env.ARFLAGS_debug = []

	self.env.CFLAGS_profile = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	self.env.CXXFLAGS_profile = ['/DNDEBUG', '/D_HAS_EXCEPTIONS=0', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	self.env.LINKFLAGS_profile = ['/DEBUG', '/LTCG']
	self.env.ARFLAGS_profile = ['/LTCG']

	self.env.CFLAGS_final = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	self.env.CXXFLAGS_final = ['/DNDEBUG', '/D_HAS_EXCEPTIONS=0', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	self.env.LINKFLAGS_final = ['/DEBUG', '/LTCG']
	self.env.ARFLAGS_final = ['/LTCG']

@conf
def set_windows_gcc_options(self):
	pass


def options(opt):
	pass

def configure(conf):
	seen = set([])
	for version, config in conf.env.MSVC_INSTALLED_VERSIONS:
		version_name, version_number = version.split()
		if version_name in ['intel', 'wsdk', 'msvc', 'winphone']:
			for target_arch, infos in config:
				if (target_arch, version) in seen:
					continue
				seen.add((target_arch, version))
				arch, (bindir, libdir, includedir) = infos
				toolchain = '%s-%s-%s-%s'%('windows', target_arch, version_name, version_number)
				env = conf.env.derive()
				conf.setenv(toolchain, env)
				try:
					conf.env.MSVC_VERSIONS = [version]
					conf.env.MSVC_TARGETS = [target_arch]
					conf.load('msvc')
					conf.set_windows_options()
					conf.set_windows_msvc_options()
					conf.env.KERNEL_TOOLCHAINS = [toolchain]
					conf.add_toolchain('windows', target_arch, version_name, version_number, arch)
					conf.variant = ''
					Logs.pprint('GREEN', 'configured for toolchain %s' % (toolchain))
				except Errors.WafError as e:
					conf.variant = ''
					Logs.pprint('YELLOW', '%s failed: %s' % (toolchain, e))

def build(bld):
	bld.platforms.append(bld.external('3rdparty.win32'))
	bld.platforms.append(bld.external('3rdparty.dbghelp'))

def plugins(bld):
	pass

@feature('cprogram', 'cxxprogram')
@after_method('apply_link')
@before_method('apply_implib')
def apply_implib_program(self):
	self.apply_implib()


