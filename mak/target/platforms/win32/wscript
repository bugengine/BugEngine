# set win32 specific options

import os
import mak
from waflib.Logs import info,warn,pprint

# adds MSVC vars to environment
def add_msvc_to_env(conf, compiler, version, target, platform, tname):
	conf.env['MSVC_VERSIONS'] = [compiler+' '+version]
	conf.env['MSVC_TARGETS'] = [target]
	conf.load('msvc')

	conf.env['CFLAGS_debug'] = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG']
	conf.env['CXXFLAGS_debug'] = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG', '/GR']
	conf.env['LINKFLAGS_debug'] = ['/DEBUG']

	conf.env['CFLAGS_profile'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['CXXFLAGS_profile'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['LINKFLAGS_profile'] = ['/DEBUG']

	conf.env['CFLAGS_final'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['CXXFLAGS_final'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['LINKFLAGS_final'] = ['/DEBUG']


def add_win32_gcc_flags_to_env(conf):
	conf.env['CFLAGS_warnall'] += ['-Wno-comments']
	conf.env['CXXFLAGS_warnall'] += ['-Wno-comments', '-fcheck-new']
	conf.env['shlib_CXXFLAGS'] = []
	conf.env['shlib_CFLAGS'] = []
	conf.env.append_unique('CFLAGS', '-mwindows')
	conf.env.append_unique('CXXFLAGS', '-mwindows')
	conf.env.append_unique('LINKFLAGS', '-mwindows')
	conf.env.append_unique('LINKFLAGS', '-static-libgcc')
	conf.env.append_unique('LINKFLAGS', ['-Wl,-Bstatic', '-lstdc++'])


def add_win32_flags_to_env(conf, name, arch):
	conf.env['PLATFORM'] = mak.allplatforms['win32']
	conf.env['ABI'] = 'pe'
	conf.env['library_PATTERN'] = '%s.lib'
	conf.env['shlib_PATTERN']	= '%s.dll'
	conf.env['program_PATTERN'] = '%s.exe'
	if conf.env['CC_NAME'] == 'gcc':
		if arch in ['amd64', 'x64', 'x86_64']:
			conf.env['WINRCFLAGS'].append('--target=pe-x86-64')
		else:
			conf.env['WINRCFLAGS'].append('--target=pe-i386')

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_win32', 'WIN32', '_WIN32', '_WIN32_', '__WIN32__', '_WIN32_WINNT=0x0502'])
	if arch in ['amd64', 'x64', 'x86_64']:
		conf.env.append_unique('DEFINES', ['_WIN64'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', name))
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'',
									'etc':		'conf',
									'runbin':	'',
									'api':		os.path.join('dev','include'),
									'lib':		os.path.join('dev','lib'),
									'data':		'data',
									'plugin':	os.path.join('data', 'plugins') }


def options(opt):
	pass

def configure(conf):
	mak.allplatforms['win32'] = ['win32', 'pc']
	for (version, toolchaindir, target, arch) in conf.env['GCC_TARGETS']:
		if target.find('mingw') != -1:
			conf.create_gcc_env(version, toolchaindir, target, 'win32', arch, add_win32_gcc_flags_to_env, add_win32_flags_to_env)
	for (compiler, version, target, platform, tname) in conf.env['MSVC_TARGETS']:
		if platform == 'win32':
			name = '%s-%s-%s-%s' %(compiler, platform, target, version)
			conf.setenv(name, conf.env.derive())
			try:
				add_msvc_to_env(conf, compiler, version, target, platform, tname)
				add_win32_flags_to_env(conf, name, tname)
				conf.recurse(os.path.join('..', '..', '..', 'target', 'archs', tname), once=False)
				conf.recurse(os.path.join('..', '..', '..', 'libs'), once=False)

				pprint('GREEN', 'configure for tool %s' % name)
				conf.variant = ''
				conf.env['BUILD_VARIANTS'].append(name)
			except Exception as e:
				warn('msvc not available: '+str(e))
				conf.variant = ''


def build(bld):
	mak.allplatforms['win32'] = ['win32', 'pc']
