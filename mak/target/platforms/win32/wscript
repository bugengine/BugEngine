# set win32 specific options

import os
import mak
try:
	import Tools.msvc
except:
	pass

import Utils
import Options
from Logs import info,warn

# adds MSVC vars to environment
def add_msvc_to_env(conf, compiler, version, target, platform, tname):
	conf.env['MSVC_VERSIONS'] = [compiler+' '+version]
	conf.env['MSVC_TARGETS'] = [target]
	conf.check_tool('msvc')

	conf.env['CCFLAGS_debug'] = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG']
	conf.env['CXXFLAGS_debug'] = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG']
	conf.env['LINKFLAGS_debug'] = ['/DEBUG']

	conf.env['CCFLAGS_release'] = ['/O2', '/Ob2', '/Zi', '/MT', '/EHsc']
	conf.env['CXXFLAGS_release'] = ['/O2', '/Ob2', '/Zi', '/MT', '/EHsc']
	conf.env['LINKFLAGS_release'] = ['/DEBUG']

	conf.env['CCFLAGS_profile'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['CXXFLAGS_profile'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['LINKFLAGS_profile'] = ['/DEBUG']

	conf.env['CCFLAGS_final'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['CXXFLAGS_final'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['LINKFLAGS_final'] = ['/DEBUG']


def add_win32_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.check_tool('cross_gcc', tooldir='mak/tools')
	conf.env['WINRC'] = conf.find_program('%s-windres' %gcc_target, path_list = conf.env['PATH'], var='WINRC')
	conf.check_tool('winres')


def add_win32_gcc_flags_to_env(conf):
	conf.env['CCFLAGS_warnall'] += ['-Wno-comments']
	conf.env['CXXFLAGS_warnall'] += ['-Wno-comments', '-fcheck-new']
	conf.env.append_unique('CCFLAGS', '-mwindows')
	conf.env.append_unique('CXXFLAGS', '-mwindows')
	conf.env.append_unique('LINKFLAGS', '-mwindows')
	conf.env.append_unique('LINKFLAGS', '-static-libgcc')
	conf.env.append_unique('LINKFLAGS', '-Wl,-Bstatic')
	conf.env.append_unique('LINKFLAGS', '-lstdc++')
	conf.env.append_unique('LINKFLAGS', '-Wl,-Bdynamic')


def add_win32_flags_to_env(conf):
	conf.env['PLATFORM'] = mak.allplatforms['win32']
	conf.env['library_PATTERN'] = '%s.lib'
	conf.env['shlib_PATTERN']	= '%s.dll'
	conf.env['program_PATTERN'] = '%s.exe'

	conf.env.append_unique('CCDEFINES', ['BE_PLATFORM=platform_win32', 'WIN32', '_WIN32', '_WIN32_', '__WIN32__', '_WIN32_WINNT=0x0502'])
	conf.env.append_unique('CXXDEFINES', ['BE_PLATFORM=platform_win32', 'WIN32', '_WIN32', '_WIN32_', '__WIN32__', '_WIN32_WINNT=0x0502'])
	if conf.env['GCC_CONFIGURED_ARCH'] == 'amd64':
		conf.env.append_unique('CCDEFINES', ['_WIN64'])
		conf.env.append_unique('CXXDEFINES', ['_WIN64'])
	conf.env['PREFIX']			= os.path.abspath(conf.env['_VARIANT_'])
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'',
									'etc':		'conf',
									'runbin':	'',
									'api':		os.path.join('dev','include'),
									'lib':		os.path.join('dev','lib'),
									'data':		'data',
									'plugin':	os.path.join('data', 'plugins') }


def set_options(opt):
	pass

def configure(conf):
	mak.allplatforms['win32'] = ['win32', 'pc']
	for (version, toolchaindir, target) in conf.env['GCC_TARGETS']:
		if target.find('mingw') != -1:
			newenv = conf.set_env_name('temp', conf.env.copy())
			conf.setenv('temp')
			try:
				add_win32_gcc_to_env(conf, version, toolchaindir, target)
				add_win32_gcc_flags_to_env(conf)

				name = 'gcc-win32-'+conf.env['GCC_CONFIGURED_ARCH']+'-'+version.replace('-','_')
				newenv.set_variant(name)
				add_win32_flags_to_env(conf)

				newenv = conf.set_env_name(name, newenv)
				Utils.pprint('NORMAL', 'configure for tool %s' % name)
				conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', conf.env['GCC_CONFIGURED_ARCH']))
				del conf.all_envs['temp']
				conf.setenv('default')
				conf.env['BUILD_VARIANTS'].append(name)
			except Exception, e:
				warn('gcc not available: '+str(e))
				conf.setenv('default')
	for (compiler, version, target, platform, tname) in conf.env['MSVC_TARGETS']:
		if platform == 'win32':
			newenv = conf.set_env_name('temp', conf.env.copy())
			conf.setenv('temp')
			try:
				add_msvc_to_env(conf, compiler, version, target, platform, tname)

				name = '%s-%s-%s-%s' %(compiler, platform, target, version)
				newenv.set_variant(name)
				add_win32_flags_to_env(conf)

				Utils.pprint('NORMAL', 'configure for tool %s' % name)
				newenv = conf.set_env_name(name, newenv)
				conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', tname))

				del conf.all_envs['temp']
				conf.setenv('default')
				conf.env['BUILD_VARIANTS'].append(name)
			except Exception, e:
				warn('msvc not available: '+str(e))
				conf.setenv('default')


def build(bld):
	mak.allplatforms['win32'] = ['win32', 'pc']
