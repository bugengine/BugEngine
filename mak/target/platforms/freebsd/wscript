# set linux specific options

import os
import mak
import mak.tools.cross_gcc
from waflib.Logs import info,warn,pprint


def options(opt):
	pass


def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.load('cross_gcc', tooldir='mak/tools')


def add_gcc_flags_to_env(conf):
	conf.env.append_unique('DEFINES', ['_REENTRANT'])
	conf.env.append_unique('CFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-lpthread', '-rdynamic', '-Wl,-E', '-L/usr/local/lib'])
	#conf.env.append_unique('CFLAGS', ['-fvisibility=hidden'])
	#conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def add_freebsd_flags_to_env(conf, name, arch):
	conf.env['PLATFORM'] = mak.allplatforms['freebsd']
	conf.env['ABI'] = 'elf'
	conf.env['library_PATTERN'] = 'lib%s.a'
	conf.env['shlib_PATTERN']	= 'lib%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.RPATH = '$ORIGIN/../share/bugengine/plugins'
	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_freebsd', 'FREEBSD', '_FREEBSD', '_FREEBSD_', '__FREEBSD__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', name))
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'lib',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins') }

def configure(conf):
	mak.allplatforms['freebsd'] = ['freebsd', 'posix', 'pc']
	conf.get_native_gcc_target()
	if conf.env.GCC_NATIVE_TARGET and conf.env.GCC_NATIVE_VERSION:
		if conf.env.HOST == 'freebsd':
			conf.create_gcc_env(conf.env.GCC_NATIVE_VERSION, '/usr/lib', conf.env.GCC_NATIVE_TARGET, 'freebsd', conf.env.GCC_NATIVE_ARCH, add_gcc_flags_to_env, add_freebsd_flags_to_env)
	for (version, toolchaindir, target, arch, gcc, gxx) in conf.env['GCC_TARGETS']:
		if target.find('freebsd') != -1:
			conf.create_gcc_env(version, toolchaindir, target, 'freebsd', arch, gcc, gxx, add_gcc_flags_to_env, add_freebsd_flags_to_env)

def build(bld):
	mak.allplatforms['freebsd'] = ['freebsd', 'posix', 'pc']
