# set linux specific options

import os
import mak
import mak.tools.cross_gcc
from Logs import info,warn,pprint


def options(opt):
	pass


def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.check_tool('cross_gcc', tooldir='mak/tools')


def add_gcc_flags_to_env(conf):
	conf.env.append_unique('CCFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-rdynamic', '-Wl,-E'])
	#conf.env.append_unique('CCFLAGS', ['-fvisibility=hidden'])
	#conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def add_freebsd_flags_to_env(conf):
	conf.env['PLATFORM'] = mak.allplatforms['freebsd']
	conf.env['library_PATTERN'] = 'lib%s.a'
	conf.env['shlib_PATTERN']	= 'lib%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('CCDEFINES', ['BE_PLATFORM=platform_freebsd', 'FREEBSD', '_FREEBSD', '_FREEBSD_', '__FREEBSD__'])
	conf.env.append_unique('CXXDEFINES', ['BE_PLATFORM=platform_freebsd', 'FREEBSD', '_FREEBSD', '_FREEBSD_', '__FREEBSD__'])
	conf.env['PREFIX']			= os.path.abspath(conf.env['_VARIANT_'])
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'lib',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins') }

def configure(conf):
	mak.allplatforms['freebsd'] = ['freebsd', 'posix', 'pc']
	for (version, toolchaindir, target, arch) in conf.env['GCC_TARGETS']:
		if target.find('freebsd') != -1:
			newenv = conf.set_env_name('temp', conf.env.copy())
			conf.setenv('temp')
			try:
				add_gcc_to_env(conf, version, toolchaindir, target)
				add_gcc_flags_to_env(conf)
				name = 'gcc-freebsd-'+newenv['GCC_CONFIGURED_ARCH']+'-'+version.replace('-', '_')
				newenv.set_variant(name)
				add_freebsd_flags_to_env(conf)
				newenv = conf.set_env_name(name, newenv)
				pprint('NORMAL', 'configure for tool %s' % name)
				conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', arch))
				del conf.all_envs['temp']
				conf.setenv('default')
				conf.env['BUILD_VARIANTS'].append(name)
			except Exception as e:
				warn('gcc not available: '+str(e))
				conf.setenv('default')



def build(bld):
	mak.allplatforms['freebsd'] = ['freebsd', 'posix', 'pc']
