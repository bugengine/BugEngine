# set SunOS specific options

import os
import mak
import Logs
import Options
from Logs import info,warn,pprint

def options(opt):
	pass

def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.check_tool('cross_gcc', tooldir='mak/tools')


def add_gcc_flags_to_env(conf, toolchaindir):
	conf.env.append_unique('CCFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-rdynamic', '-R', os.path.abspath(os.path.join(toolchaindir, 'lib'))])
	conf.env.append_unique('CCFLAGS', ['-fvisibility=hidden'])
	conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])


def add_sunos_flags_to_env(conf):
	conf.env['PLATFORM'] = mak.allplatforms['sunos']
	conf.env['library_PATTERN'] = 'lib%s.a'
	conf.env['shlib_PATTERN']	= 'lib%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('CCDEFINES', ['BE_PLATFORM=platform_sunos', 'POSIX', '_POSIX', '_POSIX_', '__POSIX__'])
	conf.env.append_unique('CXXDEFINES', ['BE_PLATFORM=platform_sunos', 'POSIX', '_POSIX', '_POSIX_', '__POSIX__'])
	conf.env['PREFIX']			= os.path.abspath(conf.env['_VARIANT_'])
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'lib',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', getattr(Utils.g_module, 'APPNAME', 'noname')),
									'plugin':	os.path.join('share', 'bugengine', 'plugins')  }

def configure(conf):
	mak.allplatforms['sunos'] = ['sunos', 'posix', 'pc']
	for (version, toolchaindir, target, arch) in conf.env['GCC_TARGETS']:
		if target.find('solaris') != -1:
			name = 'gcc-sunos-'+arch+'-'+version.replace('-','_')
			defaultenv = conf.get_env()
			conf.setenv(name, conf.env.derive())
			try:
				add_gcc_to_env(conf, version, toolchaindir, target)
				add_gcc_flags_to_env(conf, toolchaindir)
				add_sunos_flags_to_env(conf)
				conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', arch))

				pprint('NORMAL', 'configure for tool %s' % name)

				conf.set_env(defaultenv)
				conf.env['BUILD_VARIANTS'].append(name)
			except Exception as e:
				warn('gcc not available: '+str(e))
				conf.set_env(defaultenv)


def build(bld):
	mak.allplatforms['sunos'] = ['sunos', 'posix', 'pc']
