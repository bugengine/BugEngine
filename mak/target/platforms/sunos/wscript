# set SunOS specific options

import os
import mak
from waflib import Context
from waflib.Logs import info,warn,pprint

def options(opt):
	pass



def add_suncc_flags_to_env(conf, arch):
	v = conf.env
	if arch in ['x86', 'i386', 'i486', 'i586', 'i686']:
		v.append_unique('CFLAGS', ['-m32'])
		v.append_unique('CXXFLAGS', ['-m32', '../../../mak/suncc/interlocked-a=x86.il'])
		v.append_unique('LINKFLAGS', ['-m32'])
	elif arch in ['x86_64', 'x64', 'amd64']:
		v.append_unique('CFLAGS', ['-m64'])
		v.append_unique('CXXFLAGS', ['-m64', '../../../mak/suncc/interlocked-a=amd64.il'])
		v.append_unique('LINKFLAGS', ['-m64'])
	v.append_unique('CFLAGS', ['-mt', '-xldscope=hidden', '-Kpic', '-DPIC', '-D__PIC__'])
	v.append_unique('CXXFLAGS', ['-mt', '-xldscope=hidden', '-Kpic', '-DPIC', '-D__PIC__'])
	v.append_unique('LINKFLAGS', ['-lposix4', '-mt', '-znow', '-xldscope=hidden', '-Kpic', '-ldl', '-lm'])




def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.load('cross_gcc', tooldir='mak/tools')
	conf.find_program('objcopy', var='OBJCOPY', mandatory=False)
	if not conf.env['OBJCOPY']:
		conf.find_program('gobjcopy', var='OBJCOPY', mandatory=False)


def add_gcc_flags_to_env(conf):
	conf.env.BROKEN_INITIALIZER = True
	conf.env.append_unique('CFLAGS', ['-fpic', '-fno-jump-tables'])
	conf.env.append_unique('CXXFLAGS', ['-fpic', '-fno-jump-tables'])
	conf.env.append_unique('LINKFLAGS', ['-static-libgcc', '-lposix4', '-lstdc++'])
	for i in os.environ['PATH'].split(':'):
		conf.env.append_unique('RPATH', [os.path.join(os.path.split(i)[0], 'lib')])


def add_sunos_flags_to_env(conf, name, arch):
	conf.env['PLATFORM'] = mak.allplatforms['sunos']
	conf.env['library_PATTERN'] = 'lib%s.a'
	conf.env['shlib_PATTERN']	= 'lib%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_sunos', 'POSIX', '_POSIX', '_POSIX_', '__POSIX__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', name))
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'lib',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins')  }

def configure(conf):
	mak.allplatforms['sunos'] = ['sunos', 'posix', 'pc']
	for compilerc, compilercxx, version,platform,arch in conf.env.SUNCC_TARGETS:
		if platform.lower() != 'sunos':
			continue
		name = 'suncc-sunos-'+arch+'-'+version.replace('-','_')
		conf.setenv(name, conf.env.derive())
		try:
			conf.env.CC = compilerc
			conf.env.CXX = compilercxx
			conf.load('cross_suncc', tooldir='mak/tools')
			add_suncc_flags_to_env(conf, arch)
			add_sunos_flags_to_env(conf, name, arch)
			conf.recurse(os.path.join('..', '..', '..', 'target', 'archs', arch), once=False)
			conf.recurse(os.path.join(conf.mak, 'libs'), once=False)
			pprint('GREEN', 'configure for tool %s' % name)
			conf.variant = ''
			conf.env['BUILD_VARIANTS'].append(name)
		except Exception as e:
			warn('suncc not available: '+str(e))
			conf.variant = ''
	for (version, toolchaindir, target, arch) in conf.env['GCC_TARGETS']:
		if target.find('solaris') != -1:
			conf.create_gcc_env(version, toolchaindir, target, 'sunos', arch, add_gcc_flags_to_env, add_sunos_flags_to_env)


def build(bld):
	mak.allplatforms['sunos'] = ['sunos', 'posix', 'pc']
