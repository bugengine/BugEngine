# set linux specific options

import os
import mak
import Utils
from Logs import info,warn


def set_options(opt):
	pass

def add_suncc_to_env(conf):
	conf.check_tool('suncc suncxx')

def add_suncc_flags_to_env(conf):
	v = conf.env
	conf.env.append_unique('CCFLAGS', [])
	conf.env.append_unique('CXXFLAGS', ['-library=no%Cstd,stlport4'])
	conf.env.append_unique('LINKFLAGS', ['-library=no%Cstd,stlport4', '-staticlib=%all', '-ldl'])



def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']   = version
	newenv['GCC_TARGET']    = gcc_target
	newenv['GCC_PATH']              = [os.path.abspath(os.path.join(toolchaindir, 'bin')),
													   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.check_tool('cross_gcc', tooldir='mak/tools')

def add_gcc_flags_to_env(conf):
	conf.env.append_unique('CCFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-ldl', '-rdynamic', '-Wl,-E'])
	conf.env.append_unique('CCFLAGS', ['-fvisibility=hidden'])
	conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def add_linux_flags_to_env(conf):
	conf.env['PLATFORM'] = mak.allplatforms['linux']
	conf.env['library_PATTERN'] = 'lib%s.a'
	conf.env['shlib_PATTERN']	= 'lib%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('CCDEFINES', ['BE_PLATFORM=platform_linux', 'LINUX', '_LINUX', '_LINUX_', '__LINUX__'])
	conf.env.append_unique('CXXDEFINES', ['BE_PLATFORM=platform_linux', 'LINUX', '_LINUX', '_LINUX_', '__LINUX__'])
	conf.env['PREFIX']			= os.path.abspath(conf.env['_VARIANT_'])
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'lib',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins') }

def configure(conf):
	mak.allplatforms['linux'] = ['linux', 'posix', 'pc']
	if conf.env['HOST'] == 'linux':
		try:
			newenv = conf.set_env_name('temp', conf.env.copy())
			conf.setenv('temp')
			add_suncc_to_env(conf)
			add_suncc_flags_to_env(conf)
			name = 'suncc-linux-??-??'
			newenv.set_variant(name)
			add_linux_flags_to_env(conf)
			newenv = conf.set_env_name(name, newenv)
			conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', 'x86'))
			del conf.all_envs['temp']
			conf.setenv('default')
			conf.env['BUILD_VARIANTS'].append(name)
		except Exception, e:
			print e
			conf.setenv('default')
	for (version, toolchaindir, target) in conf.env['GCC_TARGETS']:
		if target.find('linux') != -1:
			newenv = conf.set_env_name('temp', conf.env.copy())
			conf.setenv('temp')
			try:
				add_gcc_to_env(conf, version, toolchaindir, target)
				add_gcc_flags_to_env(conf)

				name = 'gcc-linux-'+conf.env['GCC_CONFIGURED_ARCH']+'-'+version.replace('-','_')
				newenv.set_variant(name)
				add_linux_flags_to_env(conf)
				newenv = conf.set_env_name(name, newenv)
				Utils.pprint('NORMAL', 'configure for tool %s' % name)
				conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', conf.env['GCC_CONFIGURED_ARCH']))
				del conf.all_envs['temp']
				conf.setenv('default')
				conf.env['BUILD_VARIANTS'].append(name)
			except Exception, e:
				warn('gcc not available: '+str(e))
				conf.setenv('default')


def build(bld):
	mak.allplatforms['linux'] = ['linux', 'posix', 'pc']
