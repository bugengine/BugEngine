# set MacOS specific options

import os
import mak
from waflib import Context, Errors
from waflib.Logs import info,warn,pprint
from waflib.TaskGen import feature, before_method, after_method

def options(opt):
	opt.add_option( '--macosx-sdk',
					action='store',
					default='',
					dest='macosx_sdk',
					help='Version of the MacOS X SDK to target')

def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.load('cross_gcc', tooldir='mak/tools')


def add_gcc_flags_to_env(conf):
	v = conf.env
	v.append_unique('CFLAGS', ['-fPIC'])
	v.append_unique('CXXFLAGS', ['-fPIC'])
	v.append_unique('FRAMEWORK', ['CoreServices', 'Foundation', 'Cocoa'])
	if conf.env.GCC_NAME == 'gcc':
		v.append_unique('CFLAGS', ['-fvisibility=hidden'])
		v.append_unique('CXXFLAGS', ['-fvisibility=hidden'])
	v.append_unique('LINKFLAGS', ['-lc', '-lstdc++', '-ldl'])
	v['FRAMEWORKPATH_ST']    = '-F%s'
	v['FRAMEWORK_ST']        = ['-framework']
	v['SHLIB_MARKER']        = []
	v['STLIB_MARKER']        = []

def add_darwin_flags_to_env(conf, name, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['osx']
	conf.env['ABI'] = 'mach_o'
	conf.env['SDKROOT'] = 'macosx'
	conf.env['SUPPORTEDPLATFORMS'] = 'macosx'

	path,f = os.path.split(conf.env.CXX[0])
	while path and f:
		root = path
		path,f = os.path.split(path)
		sdks = None
		try:
			try:
				sdkpath = os.path.join(root, "SDKs")
				sdks = sorted(os.listdir(sdkpath))
			except OSError:
				sdkpath = os.path.join(root, "Platforms/MacOSX.platform/Developer/SDKs")
				sdks = sorted(os.listdir(sdkpath))
			for i in sdks:
				if i.startswith('MacOSX'):
					path=''
					break
		except OSError:
			continue
	if not sdks:
		raise Errors.WafError('could not find a MacOS X sdk')

	sdk = Options.options.macosx_sdk
	if sdk and 'MacOSX%s.sdk'%sdk in sdks:
		sdks=['MacOSX%s.sdk'%sdk]
		version = sdk
	elif sdk:
		warn("preferred SDK MacOSX%s.sdk not found; using default SDK %s" % (sdk, sdks[0]))
	for sdk in sdks[::-1]:
		try:
			full_sdk = os.path.join(sdkpath, sdk)
			version = sdks[0][6:10]
			conf.check_sdk(full_sdk, '-mmacosx-version-min=%s'%version)
			break
		except Exception as e:
			continue
	else:
		raise Errors.WafError('could not find a suitable MacOSX SDK')


	conf.env.append_value('CFLAGS', ['-mmacosx-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_value('CXXFLAGS', ['-mmacosx-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_value('LINKFLAGS', ['-mmacosx-version-min=%s'%version, '-isysroot', full_sdk, '-L%s/usr/lib'%full_sdk])
	conf.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup', '-dynamiclib'])
	conf.env.append_unique('LINKFLAGS_cxxshlib', ['-undefined', 'dynamic_lookup', '-dynamiclib'])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_darwin', '__POSIX__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', name))
	conf.env['DEPLOY']			= { 'prefix':	getattr(Context.g_module, 'APPNAME', 'noname')+'.app/Contents/',
                                                                        'root':         '',
									'bin':		'MacOS',
									'etc':		'etc',
									'runbin':	'MacOS',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins'),
									'kernel':	os.path.join('share', 'bugengine', 'kernels') }
	conf.env['KERNELS'] = [conf.env.ENVNAME]

def configure(conf):
	mak.allplatforms['osx'] = ['osx', 'darwin', 'pc']
	for (version, toolchaindir, target, arch, gcc, gxx) in conf.env['GCC_TARGETS']:
		if target.find('darwin') != -1 and target.find('arm') == -1:
			conf.create_gcc_env(version, toolchaindir, target, 'darwin', arch, gcc, gxx, add_gcc_flags_to_env, add_darwin_flags_to_env)

def build(bld):
	mak.allplatforms['osx'] = ['osx', 'darwin', 'pc']
	from waflib import Options
	xcode_paths = getattr(Options.options, 'xcode_sdks', [])
	for p in xcode_paths[::-1]:
		try:
			for platform in os.listdir(os.path.join(p, 'Platforms')):
				os.environ['PATH'] = ('%s/Platforms/%s/Developer/usr/bin:'%(p, platform))+os.environ['PATH']

		except:
			pass
		os.environ['PATH'] = ('%s/usr/bin:'%p)+os.environ['PATH']

@feature('cshlib', 'cxxshlib')
@after_method('apply_link')
def set_osx_shlib_name(self):
	if 'osx' in self.env.PLATFORM:
		if self.type in ['plugin', 'game']:
			self.env.append_unique('LINKFLAGS', ['-install_name', os.path.join('@executable_path', '..', self.env.DEPLOY['plugin'], self.link_task.outputs[0].name)])

def platformbuild(bld):
	pass
