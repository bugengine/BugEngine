# set MacOS X specific options

import os
from waflib import Context, Errors, Utils
from waflib.Logs import info,warn,pprint
from waflib.TaskGen import feature, before_method, after_method
from waflib.Configure import conf


@conf
def set_macosx_options(self):
	self.env.VALID_PLATFORMS = ['macosx', 'darwin', 'pc']

	self.env.XCODE_SDKROOT = 'macosx'
	self.env.XCODE_ABI = 'mach_o'
	self.env.XCODE_SUPPORTEDPLATFORMS = 'macosx'

	appname = getattr(Context.g_module, Context.APPNAME, os.path.basename(self.srcnode.abspath()))
	self.env.DEPLOY_ROOTDIR = os.path.join(appname + '.app', 'Contents')
	self.env.DEPLOY_BINDIR = os.path.join(appname + '.app', 'Contents', 'MacOS')
	self.env.DEPLOY_RUNBINDIR = os.path.join(appname + '.app', 'Contents', 'MacOS')
	self.env.DEPLOY_LIBDIR = 'lib'
	self.env.DEPLOY_INCLUDEDIR = 'include'
	self.env.DEPLOY_DATADIR = os.path.join(appname + '.app', 'Contents', 'share', 'bugengine')
	self.env.DEPLOY_PLUGINDIR = os.path.join(appname + '.app', 'Contents', 'share', 'bugengine', 'plugin')
	self.env.DEPLOY_KERNELDIR = os.path.join(appname + '.app', 'Contents', 'share', 'bugengine', 'kernel')

	from waflib import Options
	sdks = []
	seen = []
	for path in Options.options.xcode_sdks.split(','):
		for sdk_relative_path in [os.path.join('Platforms', 'MacOSX.platform', 'Developer', 'SDKs'), 'SDKs']:
			sdks_path = os.path.join(path, sdk_relative_path)
			try:
				sdk_list = os.listdir(sdks_path)
			except OSError:
				pass
			else:
				for sdk in sdk_list:
					sdk_name,_ = os.path.splitext(sdk)
					if sdk.startswith('MacOSX'):
						sdk_version = sdk_name[6:]
						if sdk_version not in seen:
							seen.append(sdk_version)
							sdks.append((sdk_version, os.path.join(sdks_path, sdk)))

	sdks.sort(key = lambda x: x[0])
	for sdk, sdk_path in sdks[::-1]:
		if Options.options.macosx_sdk and not sdk.startswith(Options.options.macosx_sdk):
			continue
		try:
			self.check_sdk(sdk_path, '-mmacosx-version-min=%s'%sdk)
			break
		except Errors.WafError:
			continue
	else:
		raise Errors.WafError('Could not find any suitable SDK')

	self.env.MACOSX_SDK = 'MacOSX%s'%sdk
	self.env.XCODE_SDK_PATH = sdk_path
	self.env.append_unique('CFLAGS', ['-mmacosx-version-min=%s'%sdk, '-isysroot', sdk_path])
	self.env.append_unique('CXXFLAGS', ['-mmacosx-version-min=%s'%sdk, '-isysroot', sdk_path])
	self.env.append_unique('LINKFLAGS', ['-mmacosx-version-min=%s'%sdk, '-isysroot', sdk_path, '-L%s/usr/lib'%sdk_path])

@conf
def set_macosx_gcc_options(self, arch):
	v = self.env
	v.CFLAGS = ['-fPIC', '-fvisibility=hidden']
	v.CXXFLAGS = ['-fPIC', '-fvisibility=hidden']
	v.LINKFLAGS = []
	v.CXXFLAGS_cxxshlib = []

	v.CFLAGS_warnnone = ['-w']
	v.CXXFLAGS_warnnone = ['-w']
	v.CFLAGS_warnall = ['-std=c99', '-Wall', '-Wextra', '-pedantic', '-Winline', '-Werror']
	v.CXXFLAGS_warnall = ['-Wall', '-Wextra', '-Werror', '-Wno-sign-compare', '-Woverloaded-virtual', '-Wno-invalid-offsetof']

	v.CFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
	v.CXXFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
	v.ASFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
	v.LINKFLAGS_debug = ['-pipe', '-g']

	v.CFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.CXXFLAGS_profile = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
	v.ASFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.LINKFLAGS_profile = ['-pipe', '-g']

	v.CFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.CXXFLAGS_final = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
	v.ASFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.LINKFLAGS_final = ['-pipe', '-g']

	self.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup', '-dynamiclib'])
	self.env.append_unique('LINKFLAGS_cxxshlib', ['-undefined', 'dynamic_lookup', '-dynamiclib'])


@conf
def set_macosx_clang_options(self, arch):
	v = self.env
	v.CFLAGS = ['-arch', arch, '-fPIC', '-fvisibility=hidden']
	v.CXXFLAGS = ['-arch', arch, '-fPIC', '-fvisibility=hidden']
	v.LINKFLAGS = ['-arch', arch]
	v.CXXFLAGS_cxxshlib = []

	v.CFLAGS_warnnone = ['-w']
	v.CXXFLAGS_warnnone = ['-w']
	v.CFLAGS_warnall = ['-std=c99', '-Wall', '-Wextra', '-pedantic', '-Winline', '-Werror']
	v.CXXFLAGS_warnall = ['-Wall', '-Wextra', '-Werror', '-Wno-sign-compare', '-Woverloaded-virtual', '-Wno-invalid-offsetof']

	v.CFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
	v.CXXFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
	v.ASFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
	v.LINKFLAGS_debug = ['-pipe', '-g']

	v.CFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.CXXFLAGS_profile = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
	v.ASFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.LINKFLAGS_profile = ['-pipe', '-g']

	v.CFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.CXXFLAGS_final = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
	v.ASFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
	v.LINKFLAGS_final = ['-pipe', '-g']

	self.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup', '-dynamiclib'])
	self.env.append_unique('LINKFLAGS_cxxshlib', ['-undefined', 'dynamic_lookup', '-dynamiclib'])

def options(opt):
	opt.add_option( '--macosx-sdk',
					action='store',
					default='',
					dest='macosx_sdk',
					help='Version of the MacOS X SDK to target')

def configure(conf):
	seen = set([])
	supported_architectures = {
		'x86':		'x86',
		'i386':		'x86',
		'x86_64':	'amd64',
		'x64':		'amd64',
		'amd64':	'amd64',
		'ppc':		'powerpc',
		'powerpc':	'powerpc',
		'ppc64':	'powerpc64',
		'powerpc64':'powerpc64',
	}
	for name, bindir, gcc, gxx, version, target, arch, options in conf.env.GCC_TARGETS:
		position = target.find('darwin')
		if position != -1 and arch in supported_architectures:
			os = 'macosx'
			version = target[position+6:].split('-')[0] + '_' + version
			real_arch = supported_architectures[arch]
			toolchain = '%s-%s-%s-%s'%(os, real_arch, name, version)
			if toolchain not in seen:
				seen.add(toolchain)
				env = conf.env.derive()
				conf.setenv(toolchain, env)
				try:
					conf.load_gcc(bindir, gcc, gxx, version, target, arch, options)
					conf.set_macosx_gcc_options(arch)
					conf.set_macosx_options()
					toolchain = '%s-%s-%s-%s'%(os+conf.env.MACOSX_SDK[6:], real_arch, name, version)
					conf.setenv(toolchain, conf.env.derive())
					conf.env.KERNEL_TOOLCHAINS = [toolchain]
					conf.add_toolchain(os+conf.env.MACOSX_SDK[6:], real_arch, name, version, real_arch)
					conf.variant = ''
					pprint('GREEN', 'configured for toolchain %s' % (toolchain))
				except Errors.WafError as e:
					conf.variant = ''
					pprint('YELLOW', '%s failed: %s' % (toolchain, e))
				except Exception as e:
					conf.variant = ''
					pprint('RED', '%s failed: %s' % (toolchain, e))
					raise

	for version, directory, target, arch in conf.env.CLANG_TARGETS:
		position = target.find('darwin')
		if position != -1 and arch in supported_architectures:
			os = 'macosx'
			version = target[position+6:].split('-')[0] + '_' + version
			real_arch = supported_architectures[arch]
			toolchain = '%s-%s-%s-%s'%(os, real_arch, 'clang', version)
			if toolchain not in seen:
				seen.add(toolchain)
				env = conf.env.derive()
				conf.setenv(toolchain, env)
				try:
					conf.load_clang(directory)
					conf.set_macosx_clang_options(arch)
					conf.set_macosx_options()
					toolchain = '%s-%s-%s-%s'%(os+conf.env.MACOSX_SDK[6:], real_arch, 'clang', version)
					conf.setenv(toolchain, conf.env.derive())
					conf.env.KERNEL_TOOLCHAINS = [toolchain]
					conf.add_toolchain(os+conf.env.MACOSX_SDK[6:], real_arch, 'clang', version, real_arch)
					conf.variant = ''
					pprint('GREEN', 'configured for toolchain %s' % (toolchain))
				except Errors.WafError as e:
					conf.variant = ''
					pprint('YELLOW', '%s failed: %s' % (toolchain, e))
				except Exception as e:
					conf.variant = ''
					pprint('RED', '%s failed: %s' % (toolchain, e))
					raise

def build(bld):
	bld.platforms.append(bld.external('3rdparty.cocoa'))

def plugins(bld):
	pass

@feature('cshlib', 'cxxshlib')
@after_method('apply_link')
def set_osx_shlib_name(self):
	if 'macosx' in self.env.VALID_PLATFORMS:
		if 'plugin' in self.features:
			self.env.append_unique('LINKFLAGS', ['-install_name', os.path.join('@executable_path', '..', 'share', 'bugengine', 'plugin', self.link_task.outputs[0].name)])
		elif 'kernel' in self.features:
			self.env.append_unique('LINKFLAGS', ['-install_name', os.path.join('@executable_path', '..', 'share', 'bugengine', 'kernel', self.link_task.outputs[0].name)])

