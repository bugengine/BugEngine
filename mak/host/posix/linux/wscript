# set win32 specific options
# detect tools : msvc, mingw


import os
import re
import Utils
import Configure
import Logs
import Options
from Logs import info,warn

def add_opencc_to_env(conf, version, toolchaindir, target):
	arch,compiler,platform = target.split('-')
	try:
		newenv = conf.set_env_name('temp', conf.env.copy())
		conf.setenv('temp')
		newenv['CC'] = conf.find_program('opencc-'+version, var='CC')
		newenv['CXX'] = conf.find_program('openCC-'+version, var='CXX')
		conf.check_tool('gcc gxx', tooldir='mak/tools')
		name = '-'.join(['opencc', platform, arch, version.replace('-','_')])
		newenv.set_variant(name)
		Utils.pprint('NORMAL', 'configure for tool %s' % name)
		conf.sub_config(os.path.join('..', '..', '..', 'target', 'platforms', platform))
		conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', arch))
		newenv = conf.set_env_name(name, newenv)
		del conf.all_envs['temp']
		conf.setenv('default')
		conf.env['BUILD_VARIANTS'].append(name)
	except:
		conf.setenv('default')

def get_available_opencc(conf):
	paths = ['/usr/local', '/opt', '/', '/usr']
	for toolchaindir in paths:
		if os.path.isdir(os.path.join(toolchaindir,'lib','gcc-lib')):
			for target in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc-lib')):
				if target in ['.svn', '.cvs']:
					continue
				for version in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc-lib', target)):
					if version in ['.svn', '.cvs']:
						continue
					if os.path.islink(os.path.join(toolchaindir, 'lib', 'gcc-lib', target, version)):
						continue
					name = add_opencc_to_env(conf, version, os.path.join(toolchaindir), target)

def get_available_suncc(conf):
	newenv = conf.env.copy()
	conf.set_env_name('temp',newenv)
	conf.setenv('temp')
	try:
		conf.check_tool('cross_suncc', tooldir='mak/tools')
		name = 'suncc-linux-'+conf.env['SUNCC_TARGET']+'-'+conf.env['SUNCC_VERSION']
		Utils.pprint('NORMAL', '=> configured for tool %s' % name)
		conf.set_env_name(name, newenv)
		newenv.set_variant(name)
		conf.sub_config(os.path.join('..', '..', '..', 'target', 'platforms', 'linux'))
		conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', conf.env['SUNCC_TARGET']))
		del conf.all_envs['temp']
		conf.setenv('default')
		conf.env['BUILD_VARIANTS'].append(name)
	except Exception, e:
		warn('suncc not available: '+str(e)) 
		conf.setenv('default')

def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.set_env_name('temp', conf.env.copy())
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.setenv('temp')
	try:
		conf.check_tool('cross_gcc', tooldir='mak/tools')
		name = 'gcc-'+conf.env['GCC_CONFIGURED_PLATFORM']+'-'+conf.env['GCC_CONFIGURED_ARCH']+'-'+version.replace('-','_')
		newenv.set_variant(name)
		if conf.env['GCC_CONFIGURED_PLATFORM']=='win32':
			conf.env['WINRC'] = conf.find_program('%s-windres' %gcc_target, path_list = conf.env['PATH'], var='WINRC')
			conf.check_tool('winres')
		Utils.pprint('NORMAL', 'configure for tool %s' % name)
		conf.sub_config(os.path.join('..', '..', '..', 'target', 'platforms', conf.env['GCC_CONFIGURED_PLATFORM']))
		conf.sub_config(os.path.join('..', '..', '..', 'target', 'archs', conf.env['GCC_CONFIGURED_ARCH']))
		newenv = conf.set_env_name(name, newenv)
		del conf.all_envs['temp']
		conf.setenv('default')
		conf.env['BUILD_VARIANTS'].append(name)
	except Exception, e:
		warn('gcc not available: '+str(e)) 
		conf.setenv('default')


# gets a list of the GCC toolchains installed
def get_available_gcc(conf):
	paths = ['/usr/local', '/opt', '/', '/usr']
	for toolchaindir in paths:
		if os.path.isdir(os.path.join(toolchaindir,'lib','gcc')):
			for target in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc')):
				if target in ['.svn', '.cvs']:
					continue
				for version in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc', target)):
					if version in ['.svn', '.cvs']:
						continue
					if os.path.islink(os.path.join(toolchaindir, 'lib', 'gcc', target, version)):
						continue
					name = add_gcc_to_env(conf, version, os.path.join(toolchaindir), target)

def set_options(opt):
	Utils.pprint('NORMAL', 'Host system is posix/linux')
	opt.add_option( '--gcc-install-path',
					action='store',
					default='',
					dest='gcc_install_path',
					help='adds a comma separated list of paths where GCC might be installed')

def configure(conf):
	conf.env['BUILD_VARIANTS'] = []
	conf.check_tool("bison flex", tooldir='mak/tools')
	get_available_suncc(conf)
	get_available_opencc(conf)
	get_available_gcc(conf)

	if len(conf.env['BUILD_VARIANTS']) == 0:
		raise SystemExit("no match found : make sure you selected a valid toolchain")

