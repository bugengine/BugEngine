# set win32 specific options
# detect tools : msvc, mingw


import _winreg
import os
import re
import Tools.msvc
import Utils
import Configure
import Logs
from Logs import info,warn

# adds MSVC vars to environment
def add_msvc_to_env(conf, compiler, version, target, tname):
	name = '%s-win32-%s-%s' %(compiler,target,version)
	info('configure for tool %s' % name)
	newenv = conf.set_env_name(name, conf.env.copy())
	newenv.set_variant(name)
	tool,platform,arch,version = name.split('-')
	newenv['PLATFORM'] = platform
	newenv['ARCHITECTURE'] = tname
	newenv['MSVC_VERSIONS'] = [compiler+' '+version]
	newenv['MSVC_TARGETS'] = [target]
	conf.setenv(name)
	try:
		conf.check_tool('msvc')
	except Configure.ConfigurationError:
		conf.setenv('default')
		warn('configuration fail for tool %s' % name)
		return
	conf.sub_config(os.path.join('..', '..', 'target', 'platforms', 'win32'))
	conf.sub_config(os.path.join('..', '..', 'target', 'archs', tname))
	conf.setenv('default')
	conf.env['BUILD_VARIANTS'].append(name)

# gets a list of all the MSVC complete suites installed
def get_available_msvc( conf):
	allversions = conf.get_msvc_versions()
	for (compiler, targets) in allversions:
		compiler,version = compiler.split()
		for (target, (tname, paths)) in targets:
			add_msvc_to_env(conf, compiler, version, target, tname)

# adds GCC vars to environment
gccPlatforms = {
	'mingw32' : [('win32','x86')],
	'x86_64-pc-mingw32' : [('win32','amd64')],
	'powerpc-gekko': [('wii','powerpc')],
	'psp': [('psp','mips')],
	'arm-eabi': [('nds', 'arm7'), ('nds', 'arm9')]
}
	
def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	import subprocess
	try: supportedPlatforms = gccPlatforms[gcc_target]
	except KeyError: supportedPlatforms = []
	for platform,arch in supportedPlatforms:
		name = 'gcc-'+platform + '-' + arch + '-' + version
		Utils.pprint('NORMAL', 'configure for tool %s' % name)
		newenv = conf.set_env_name(name, conf.env.copy())
		newenv.set_variant(name)
		tool,platform,arch,version = name.split('-')
		newenv['PLATFORM']		= platform
		newenv['ARCHITECTURE']	= arch
		newenv['GCC_VERSION']	= version
		newenv['GCC_TARGET']	= gcc_target
		newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
								   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
		conf.setenv(name)
		conf.check_tool('cross_gcc cross_gxx cross_gas', tooldir='mak/tools')
		if platform=='win32':
			conf.env['WINRC'] = conf.find_program('%s-windres' %gcc_target, path_list = conf.env['PATH'], var='WINRC')
			conf.check_tool('winres')
		conf.sub_config(os.path.join('..', '..', 'target', 'platforms', platform))
		conf.sub_config(os.path.join('..', '..', 'target', 'archs', arch))
		conf.setenv('default')
		conf.env['BUILD_VARIANTS'].append(name)

# gets a list of the GCC toolchains installed
def get_available_gcc(conf):
	toolchaindir = '../..'
	if os.path.isdir(os.path.join(toolchaindir,'lib','gcc')):
		for target in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc')):
			if target in ['.svn', '.cvs']:
				continue
			for version in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc', target)):
				if version in ['.svn', '.cvs']:
					continue
				name = add_gcc_to_env(conf, version, os.path.join(toolchaindir), target)


def set_options(opt):
	Utils.pprint('NORMAL', 'Host system is Win32')

def configure(conf):
	import Options

	conf.check_tool("bison flex", tooldir='mak/tools')

	conf.env['BUILD_VARIANTS'] = []
	get_available_gcc(conf)
	get_available_msvc(conf)

	if len(conf.env['BUILD_VARIANTS']) == 0:
		raise SystemExit("no match found : make sure you selected a valid toolchain")
