# set win32 specific options
# detect tools : msvc, mingw


import os
import Utils
import Configure
import Logs
import Options
from Logs import info,warn

os.environ['PATH'] = os.path.abspath("mak\\win32\\bin\\;")+os.environ['PATH']

# gets a list of all the MSVC complete suites installed
def get_available_msvc(conf):
	conf.env['MSVC_TARGETS'] = []
	allversions = conf.get_msvc_versions()
	for (compiler, targets) in allversions:
		compiler,version = compiler.split()
		for (target, (tname, platform, paths)) in targets:
			if tname in conf.env['ARCHITECTURES']:
				conf.env['MSVC_TARGETS'].append((compiler, version, target, platform, tname))


# gets a list of the GCC toolchains installed
def get_available_gcc(conf):
	toolchaindirs=[]
	conf.env['GCC_TARGETS'] = []
	for dir in os.environ['PATH'].split(';'):
		toolchaindirs.append(os.path.join(dir, '..'))
	for toolchaindir in toolchaindirs:
		if os.path.isdir(os.path.join(toolchaindir,'lib','gcc')):
			for target in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc')):
				if target in ['.svn', '.cvs']:
					continue
				for version in os.listdir(os.path.join(toolchaindir, 'lib', 'gcc', target)):
					if version in ['.svn', '.cvs']:
						continue
					conf.env['GCC_TARGETS'].append((version, toolchaindir, target))


def set_options(opt):
	Utils.pprint('NORMAL', 'Host system is Win32')
	opt.add_option( '--no-msvc',
					action='store_false',
					dest="msvc",
					default=True,
					help='Disable MSVC toolchains')
	pass

def configure(conf):
	conf.check_tool('flex bison data', tooldir=['mak/tools'])
	conf.env['HOST'] = 'win32'
	conf.env['BUILD_VARIANTS'] = []
	get_available_gcc(conf)
	if Options.options.msvc:
		get_available_msvc(conf)
