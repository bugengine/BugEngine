keywords = (
    'signed',
    'char',
    'short',
    'long',
    'unsigned',
    'uchar',
    'ushort',
    'uint',
    'ulong',
    'i8',
    'u8',
    'i16',
    'u16',
    'i32',
    'u32',
    'i64',
    'u64',
    'float',
    'half',
    'double',
    'bool',
    'size_t',
    'ptrdiff_t',
    'intptr_t',
    'uintptr_t',
    'void',
    'int',
    'const',
    '__global',
    '__local',
    '__constant',
    '__private',
    'restrict',
    '__restrict',
    'volatile',
    'static',
    'inline',
    'explicit',
    'virtual',
    'return',
    'do',
    'while',
    'for',
    'switch',
    'case',
    'default',
    'break',
    'continue',
    'if',
    'else',
    'enum',
    'struct',
    'union',
    'typedef',
    'sizeof',
    'true',
    'false',
    'new',
    'delete',
    'template',
    'namespace',
    'typename',
    'class',
    'using',
    'friend',
    'this',
    'published',
    'public',
    'protected',
    'private',
    'operator',
    'static_cast',
    'dynamic_cast',
    'reinterpret_cast',
    'const_cast',
) + tuple(
    '%s%d' % (t, n)
    for t in ('byte', 'ubyte', 'short', 'ushort', 'int', 'uint', 'bigint', 'biguint', 'float', 'double')
    for n in (2, 3, 4, 8, 16)
)

tokens = tuple(kw.upper() for kw in keywords) + (
    'ID',
    'STRUCT_ID',
    'TYPENAME_ID',
    'NAMESPACE_ID',
    'METHOD_ID',
    'VARIABLE_ID',
    'TEMPLATE_STRUCT_ID',
    'TEMPLATE_METHOD_ID',
    'TEMPLATE_TYPENAME_ID',
    'STRUCT_ID_SHADOW',
    'TYPENAME_ID_SHADOW',
    'NAMESPACE_ID_SHADOW',
    'METHOD_ID_SHADOW',
    'VARIABLE_ID_SHADOW',
    'TEMPLATE_STRUCT_ID_SHADOW',
    'TEMPLATE_METHOD_ID_SHADOW',
    'TEMPLATE_TYPENAME_ID_SHADOW',
    'SPECIAL_METHOD_ID',
    'INT_CONST_DEC',
    'INT_CONST_OCT',
    'INT_CONST_HEX',
    'INT_CONST_BIN',
    'FLOAT_CONST',
    'HEX_FLOAT_CONST',
    'CHAR_CONST',
    'WCHAR_CONST',
    'STRING_LITERAL',
    'WSTRING_LITERAL',
    'PLUS',
    'MINUS',
    'TIMES',
    'DIVIDE',
    'MOD',
    'OR',
    'AND',
    'NOT',
    'XOR',
    'LSHIFT',
    'RSHIFT',
    'LOR',
    'LAND',
    'LNOT',
    'LT',
    'LE',
    'GT',
    'GE',
    'EQ',
    'NE',

                                                  # Assignment
    'EQUALS',
    'TIMESEQUAL',
    'DIVEQUAL',
    'MODEQUAL',
    'PLUSEQUAL',
    'MINUSEQUAL',
    'LSHIFTEQUAL',
    'RSHIFTEQUAL',
    'ANDEQUAL',
    'XOREQUAL',
    'OREQUAL',

                                                  # Increment/decrement
    'PLUSPLUS',
    'MINUSMINUS',

                                                  # Structure dereference (->)
    'ARROW',

                                                  # Conditional operator (?)
    'CONDOP',

                                                  # C++ scope operator (::)
    'SCOPE',
    'SCOPE_MARKER',

                                                  # Delimeters
    'LPAREN',
    'RPAREN',                                     # ( )
    'LBRACKET',
    'RBRACKET',                                   # [ ]
    'LBRACE',
    'RBRACE',                                     # { }
    'COMMA',
    'PERIOD',                                     # . ,
    'SEMI',
    'COLON',                                      # ; :
    'BRACE_MARKER',

                                                  # Ellipsis (...) is not supported
                                                  # 'ELLIPSIS',
)
