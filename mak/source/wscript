import os
from waflib import Task, Options
from waflib.TaskGen import task_gen, taskgen_method, before_method, after_method, feature, extension
@extension('.pkg', '.lua')
def install_data(self, node):
	data_node = self.bld.bugenginenode.make_node('src/%s/data' % self.target.replace('.', '/'))
	self.bld.install_as(os.path.join('build', self.env.TOOLCHAIN, self.env.VARIANT, self.env.DEPLOY_DATADIR, node.path_from(data_node)), node)

@extension('.plist')
def install_plist(self, node):
	self.bld.install_files(os.path.join(self.env.PREFIX, self.bld.optim, self.env.DEPLOY_ROOTDIR), node)

@extension('.dll', '.so')
def install_binary(self, node):
	self.bld.install_files(os.path.join('build', self.env.TOOLCHAIN, self.env.VARIANT, self.env.DEPLOY_RUNBINDIR), node)

def rc_hook(self, node):
	pass

def options(opt):
	pass

def configure(conf):
	conf.load('flex', tooldir=['mak/tools'])
	conf.load('bison', tooldir=['mak/tools'])
	conf.load('data', tooldir=['mak/tools'])

def build(bld):
	if bld.env.PROJECTS:
		if not '.rc' in task_gen.mappings:
			task_gen.mappings['.rc'] = rc_hook


