# set MacOS specific options

import os
import mak
from waflib.Logs import info,warn,pprint

def options(opt):
	try:
		sdks = os.listdir(os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs'))
		opt.add_option( '--iphone-sdk',
						action='store',
						default=sdks[-1],
						dest='iphone_sdk',
						help='Use iPhoneOS sdk')
	except OSError:
		pass
	try:
		sdks = os.listdir(os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs'))
		opt.add_option( '--iphonesimulator-sdk',
						action='store',
						default=sdks[-1],
						dest='iphonesimulator_sdk',
						help='Use iPhoneSimulator sdk')
	except OSError:
		pass

def add_gcc_to_env(conf, version, toolchaindir, gcc_target):
	newenv = conf.env
	newenv['GCC_VERSION']	= version
	newenv['GCC_TARGET']	= gcc_target
	newenv['GCC_PATH']		= [os.path.abspath(os.path.join(toolchaindir, 'bin')),
							   os.path.abspath(os.path.join(toolchaindir, gcc_target, 'bin'))]
	conf.check_tool('cross_gcc', tooldir='mak/tools')


def add_gcc_flags_to_env(conf):
	conf.env.append_unique('CCFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-framework', 'OpenGLES'])
	conf.env.append_unique('CCFLAGS', ['-fvisibility=hidden'])
	conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def add_darwin_simulator_flags_to_env(conf):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['STATIC'] = 1
	conf.env.append_unique('CCFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs', Options.options.iphonesimulator_sdk)])
	conf.env.append_unique('CXXFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs', Options.options.iphonesimulator_sdk)])
	conf.env.append_unique('LINKFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs', Options.options.iphonesimulator_sdk)])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= os.path.abspath(conf.env['_VARIANT_'])
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'bin',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', getattr(Utils.g_module, 'APPNAME', 'noname')),
									'plugin':	os.path.join('data', 'plugins') }

def add_darwin_flags_to_env(conf):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['STATIC'] = 1
	conf.env.append_unique('CCFLAGS', ['-mthumb', '-mcpu=cortex-a8', '-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs', Options.options.iphone_sdk)])
	conf.env.append_unique('CXXFLAGS', ['-mthumb', '-mcpu=cortex-a8', '-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs', Options.options.iphone_sdk)])
	conf.env.append_unique('LINKFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs', Options.options.iphone_sdk)])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= os.path.abspath(conf.env['_VARIANT_'])
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'bin',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', getattr(Utils.g_module, 'APPNAME', 'noname')),
									'plugin':	os.path.join('data', 'plugins') }

def configure(conf):
	from waflib import Options
	mak.allplatforms['iphone'] = ['iphone', 'darwin']
	for (version, toolchaindir, target, arch) in conf.env['GCC_TARGETS']:
		if target.find('darwin') != -1:
			if (	(getattr(Options.options, 'iphone_sdk', None) and target.find('arm') != -1)
				or	(getattr(Options.options, 'iphonesimulator_sdk', None) and target.find('i686') != -1)):
				name = 'gcc-iphone-%s-%s' %(arch, version.replace('-', '_'))
				defaultenv = conf.get_env()
				conf.setenv(name, conf.env.derive())
				try:
					add_gcc_to_env(conf, version, toolchaindir, target)
					add_gcc_flags_to_env(conf)
					add_darwin_flags_to_env(conf)
					conf.sub_config(os.path.join('..', '..', 'mak', 'target', 'archs', arch))

					pprint('NORMAL', 'configure for tool %s' % name)
					conf.set_env(defaultenv)
					conf.env['BUILD_VARIANTS'].append(name)
				except Exception as e:
					warn('gcc not available: '+e.__class__.__name__+" "+str(e))
				conf.set_env(defaultenv)

def build(bld):
	mak.allplatforms['iphone'] = ['iphone', 'darwin']

