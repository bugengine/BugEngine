# set iPhone(Simulator) specific options
from waflib import Configure
from waflib.TaskGen import feature, after_method
import os


class iOS(Configure.ConfigurationContext.Darwin):
    NAME = 'iPhone'
    PLATFORMS = ['iphone']
    SDK_NAME = 'iPhoneOS'
    OS_NAME = 'iphoneos'

    def __init__(self, conf, sdk = None):
        Configure.ConfigurationContext.Darwin.__init__(self, conf, sdk)


class iOSSimulator(Configure.ConfigurationContext.Darwin):
    NAME = 'iPhoneSimulator'
    PLATFORMS = ['iphone', 'iphonesimulator']
    SDK_NAME = 'iPhoneSimulator'
    OS_NAME = 'iphoneos'

    def __init__(self, conf, sdk = None):
        Configure.ConfigurationContext.Darwin.__init__(self, conf, sdk)


def options(opt):
    gr = opt.get_option_group('SDK paths and options')
    gr.add_option( '--iphone-sdk-min',
                    action='store',
                    default='',
                    dest='iphone_sdk_min',
                    help='Minimum version of the iPhone SDK to target')
    gr.add_option( '--iphone-sdk-max',
                    action='store',
                    default='',
                    dest='iphone_sdk_max',
                    help='Maximum version of the iPhone SDK to target')


def host_configure(conf):
    pass


def configure(conf):
    conf.platforms.append(iOS(conf))
    conf.platforms.append(iOSSimulator(conf))


def build(bld):
    bld.platforms.append(bld.external('3rdparty.cocoa'))


def plugins(bld):
    pass


@feature('cxxshlib', 'cshlib')
@after_method('apply_link')
def set_iphone_shlib_name(self):
    if 'iphone' in self.env.VALID_PLATFORMS:
        if 'plugin' in self.features:
            self.env.append_unique('LINKFLAGS', ['-install_name', os.path.join('@executable_path', 'share', 'bugengine', 'plugin', self.link_task.outputs[0].name)])
        elif 'kernel' in self.features:
            self.env.append_unique('LINKFLAGS', ['-install_name', os.path.join('@executable_path', 'share', 'bugengine', 'kernel', self.link_task.outputs[0].name)])

