# set iPhone(Simulator) specific options

import os
import mak
from waflib import Context
from waflib.Logs import info,warn,pprint

def options(opt):
	opt.add_option( '--iphone-sdk',
					action='store',
					default='',
					dest='iphone_sdk',
					help='Version of the iPhoneOS SDK to target')

def add_gcc_flags_to_env(conf):
	conf.env.append_unique('CFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-framework', 'OpenGLES'])
	conf.env.append_unique('CFLAGS', ['-fvisibility=hidden'])
	conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def add_darwin_simulator_flags_to_env(conf, variant, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['ABI'] = 'mach_o'
	conf.env['SDKROOT'] = 'iphoneos'
	conf.env['SUPPORTEDPLATFORMS'] = 'iphonesimulator'
	conf.env['STATIC'] = 1


	path,f = os.path.split(conf.env.CXX[0])
	while path and f:
		root = os.path.join(path, "Platforms", "iPhoneSimulator.platform", "Developer", "SDKs")
		path,f = os.path.split(path)
		sdks = None
		try:
			sdks = sorted(os.listdir(root))
			break
		except OSError:
			continue
	if not sdks:
		root = "/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs"
		sdks = sorted(os.listdir(root))

	sdk = Options.options.iphone_sdk
	if sdk and 'iPhoneSimulator%s.sdk'%sdk in sdks:
		full_sdk = os.path.join(root, 'iPhoneSimulator%s.sdk'%sdk)
		version = sdk
	else:
		if sdk:
			warn("preferred SDK iPhoneSimulator%s.sdk not found; using default SDK %s" % (sdk, sdks[0]))
		full_sdk = os.path.join(root, sdks[0])
		version = sdks[0][15:18]
	conf.msg('Checking for iPhoneSimulator SDK', full_sdk)


	conf.env.append_unique('CFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('CXXFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('LINKFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', variant))
	conf.env['DEPLOY']			= { 'prefix':	getattr(Context.g_module, 'APPNAME', 'noname')+'.app/',
									'bin':		'',
									'etc':		'',
									'runbin':	'',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('data', 'plugins') }

def add_darwin_flags_to_env(conf, variant, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['ABI'] = 'mach_o'
	conf.env['STATIC'] = 1
	conf.env['SDKROOT'] = 'iphoneos'
	conf.env['SUPPORTEDPLATFORMS'] = 'iphoneos'


	path,f = os.path.split(conf.env.CXX[0])
	while path and f:
		root = os.path.join(path, "Platforms", "iPhoneOS.platform", "Developer", "SDKs")
		path,f = os.path.split(path)
		sdks = None
		try:
			sdks = sorted(os.listdir(root))
			break
		except OSError:
			continue
	if not sdks:
		root = "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs"
		sdks = sorted(os.listdir(root))

	sdk = Options.options.iphone_sdk
	if sdk and 'iPhoneSimulator%s.sdk'%sdk in sdks:
		full_sdk = os.path.join(root, 'iPhoneOS%s.sdk'%sdk)
		version = sdk
	else:
		if sdk:
			warn("preferred SDK iPhoneOS%s.sdk not found; using default SDK %s" % (sdk, sdks[0]))
		full_sdk = os.path.join(root, sdks[0])
		version = sdks[0][8:11]
	conf.msg('Checking for iPhoneOS SDK', full_sdk)

	conf.env.append_unique('CFLAGS', ['-miphoneos-version-min=%s'%version, '-mthumb', '-mcpu=cortex-a8', '-isysroot', full_sdk])
	conf.env.append_unique('CXXFLAGS', ['-miphoneos-version-min=%s'%version, '-mthumb', '-mcpu=cortex-a8', '-isysroot', full_sdk])
	conf.env.append_unique('LINKFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', variant))
	conf.env['DEPLOY']			= { 'prefix':	getattr(Context.g_module, 'APPNAME', 'noname')+'.app/Contents/',
									'bin':		'MacOS',
									'etc':		'etc',
									'runbin':	'',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('data', 'plugins') }

def configure(conf):
	from waflib import Options
	mak.allplatforms['iphone'] = ['iphone', 'darwin']
	for (version, toolchaindir, target, arch, gcc, gxx) in conf.env['GCC_TARGETS']:
		if target.find('darwin') != -1:
			if (target.find('arm') != -1 or target.find('i686') != -1):
				if target.find('arm') != -1:
					conf.create_gcc_env(version, toolchaindir, target, 'iphone', arch, gcc, gxx, add_gcc_flags_to_env, add_darwin_flags_to_env)
				else:
					conf.create_gcc_env(version, toolchaindir, target, 'iphone', arch, gcc, gxx, add_gcc_flags_to_env, add_darwin_simulator_flags_to_env)

def setup(conf):
	pass

def build(bld):
	mak.allplatforms['iphone'] = ['iphone', 'darwin']

def plugins(bld):
	pass

