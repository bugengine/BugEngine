# set MacOS specific options

import os
import mak
from waflib import Context
from waflib.Logs import info,warn,pprint

def options(opt):
	try:
		sdks = os.listdir(os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs'))
		opt.add_option( '--iphone-sdk',
						action='store',
						default=sdks[-1],
						dest='iphone_sdk',
						help='Use iPhoneOS sdk')
	except OSError:
		pass
	try:
		sdks = os.listdir(os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs'))
		opt.add_option( '--iphonesimulator-sdk',
						action='store',
						default=sdks[-1],
						dest='iphonesimulator_sdk',
						help='Use iPhoneSimulator sdk')
	except OSError:
		pass

def add_gcc_flags_to_env(conf):
	conf.env.append_unique('CFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-framework', 'OpenGLES'])
	conf.env.append_unique('CFLAGS', ['-fvisibility=hidden'])
	conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def add_darwin_simulator_flags_to_env(conf, variant, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['STATIC'] = 1
	conf.env.append_unique('CFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs', Options.options.iphonesimulator_sdk)])
	conf.env.append_unique('CXXFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs', Options.options.iphonesimulator_sdk)])
	conf.env.append_unique('LINKFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneSimulator.platform', 'Developer', 'SDKs', Options.options.iphonesimulator_sdk)])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= variant
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'bin',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', getattr(Context.g_module, 'APPNAME', 'noname')),
									'plugin':	os.path.join('data', 'plugins') }

def add_darwin_flags_to_env(conf, variant, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['STATIC'] = 1
	conf.env.append_unique('CFLAGS', ['-mthumb', '-mcpu=cortex-a8', '-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs', Options.options.iphone_sdk)])
	conf.env.append_unique('CXXFLAGS', ['-mthumb', '-mcpu=cortex-a8', '-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs', Options.options.iphone_sdk)])
	conf.env.append_unique('LINKFLAGS', ['-isysroot', os.path.join('/Developer', 'Platforms', 'iPhoneOS.platform', 'Developer', 'SDKs', Options.options.iphone_sdk)])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= variant
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'bin',
									'etc':		'etc',
									'runbin':	'bin',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', getattr(Context.g_module, 'APPNAME', 'noname')),
									'plugin':	os.path.join('data', 'plugins') }

def configure(conf):
	from waflib import Options
	mak.allplatforms['iphone'] = ['iphone', 'darwin']
	for (version, toolchaindir, target, arch) in conf.env['GCC_TARGETS']:
		if target.find('darwin') != -1:
			if (	(getattr(Options.options, 'iphone_sdk', None) and target.find('arm') != -1)
				or	(getattr(Options.options, 'iphonesimulator_sdk', None) and target.find('i686') != -1)):
				if target.find('arm') != -1:
					conf.create_gcc_env(version, toolchaindir, target, 'iphone', arch, add_gcc_flags_to_env, add_darwin_flags_to_env)
				else:
					conf.create_gcc_env(version, toolchaindir, target, 'iphone', arch, add_gcc_flags_to_env, add_darwin_simulator_flags_to_env)

def build(bld):
	mak.allplatforms['iphone'] = ['iphone', 'darwin']

