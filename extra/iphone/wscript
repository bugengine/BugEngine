# set iPhone(Simulator) specific options

import os
import mak
from waflib import Context, Errors
from waflib.Logs import info,warn,pprint
from waflib.TaskGen import feature, before_method, after_method

def options(opt):
	opt.add_option( '--iphone-sdk',
					action='store',
					default='',
					dest='iphone_sdk',
					help='Version of the iPhoneOS SDK to target')

def add_gcc_flags_to_env(conf):
	conf.env.append_unique('CFLAGS', ['-fPIC'])
	conf.env.append_unique('CXXFLAGS', ['-fPIC'])
	conf.env.append_unique('LINKFLAGS', ['-framework', 'OpenGLES'])
	conf.env.append_unique('CFLAGS', ['-fvisibility=hidden'])
	conf.env.append_unique('CXXFLAGS', ['-fvisibility=hidden'])

def find_sdks(name, path):
	sdks = []
	platform = name+".platform"
	path,f = os.path.split(path)
	while path and f:
		root = path
		path,f = os.path.split(path)
		sdks = None
		try:
			try:
				sdkpath = os.path.join(root, "SDKs")
				sdks = sorted(os.listdir(sdkpath))
			except OSError:
				sdkpath = os.path.join(root, "Platforms/%s/Developer/SDKs"%platform)
				sdks = sorted(os.listdir(sdkpath))
			for i in sdks:
				if i.startswith(name):
					path=''
					break
		except OSError:
			continue
	if not sdks:
		raise Errors.WafError('could not find a %s sdk'%name)
	return sdkpath,sdks


def add_darwin_simulator_flags_to_env(conf, variant, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['ABI'] = 'mach_o'
	conf.env['SDKROOT'] = 'iphoneos'
	conf.env['SUPPORTEDPLATFORMS'] = 'iphonesimulator'


	sdkpath,sdks = find_sdks("iPhoneSimulator", os.path.split(conf.env.CXX[0])[0])

	sdk = Options.options.iphone_sdk
	if sdk and 'iPhoneSimulator%s.sdk'%sdk in sdks:
		sdks=['iPhoneSimulator%s.sdk'%sdk]
		version = sdk
	elif sdk:
		warn("preferred SDK iPhoneSimulator%s.sdk not found; using default SDK"%sdk)
	for sdk in sdks[::-1]:
		try:
			full_sdk = os.path.join(sdkpath, sdk)
			version = sdk[15:18]
			conf.check_sdk(full_sdk, '-miphoneos-version-min=%s'%version)
			break
		except Exception as e:
			continue
	else:
		raise Errors.WafError('could not find a suitable iPhoneSimulator SDK')



	conf.env.append_unique('CFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('CXXFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('LINKFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup'])
	conf.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup'])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', variant))
	conf.env['DEPLOY']			= { 'prefix':	getattr(Context.g_module, 'APPNAME', 'noname')+'.app/',
									'bin':		'',
									'etc':		'',
									'runbin':	'',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins'),
									'kernel':	os.path.join('share', 'bugengine', 'kernels') }
	conf.env['KERNELS'] = [conf.env.ENVNAME]

def add_darwin_flags_to_env(conf, variant, arch):
	from waflib import Options
	conf.env['PLATFORM'] = mak.allplatforms['iphone']
	conf.env['ABI'] = 'mach_o'
	conf.env['SDKROOT'] = 'iphoneos'
	conf.env['SUPPORTEDPLATFORMS'] = 'iphoneos'

	conf.env.append_unique('CFLAGS', ['-mthumb', '-mcpu=arm11'])
	conf.env.append_unique('CXXFLAGS', ['-mthumb', '-mcpu=arm1176jzf-s'])

	sdkpath,sdks = find_sdks("iPhoneOS", os.path.split(conf.env.CXX[0])[0])
	sdk = Options.options.iphone_sdk
	if sdk and 'iPhoneOS%s.sdk'%sdk in sdks:
		sdks=['iPhoneOS%s.sdk'%sdk]
		version = sdk
	elif sdk:
		warn("preferred SDK iPhoneOS%s.sdk not found; using default SDK"%sdk)
	for sdk in sdks[::-1]:
		try:
			full_sdk = os.path.join(sdkpath, sdk)
			version = sdk[8:11]
			conf.check_sdk(full_sdk, '-miphoneos-version-min=%s'%version)
			break
		except Exception as e:
			continue
	else:
		raise Errors.WafError('could not find a suitable iPhoneOS SDK')

	conf.env.append_unique('CFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('CXXFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('LINKFLAGS', ['-miphoneos-version-min=%s'%version, '-isysroot', full_sdk])
	conf.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup'])
	conf.env.append_unique('LINKFLAGS_cshlib', ['-undefined', 'dynamic_lookup'])
	conf.env['library_PATTERN'] = '%s.a'
	conf.env['shlib_PATTERN']   = '%s.so'
	conf.env['program_PATTERN'] = '%s'

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_iphone', 'IPHONE', '_IPHONE', '_IPHONE_', '__IPHONE__'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', variant))
	conf.env['DEPLOY']			= { 'prefix':	getattr(Context.g_module, 'APPNAME', 'noname')+'.app/',
									'bin':		'',
									'etc':		'',
									'runbin':	'',
									'api':		'include',
									'lib':		'lib',
									'data':		os.path.join('share', 'bugengine'),
									'plugin':	os.path.join('share', 'bugengine', 'plugins'),
									'kernel':	os.path.join('share', 'bugengine', 'kernels')}
	conf.env['KERNELS'] = [conf.env.ENVNAME]


def configure(conf):
	from waflib import Options
	mak.allplatforms['iphone'] = ['iphone', 'darwin']
	for (version, toolchaindir, target, arch, gcc, gxx) in conf.env['GCC_TARGETS']:
		if target.find('darwin') != -1:
			if (target.find('arm') != -1 or target.find('i686') != -1):
				if target.find('arm') != -1:
					conf.create_gcc_env(version, toolchaindir, target, 'iphone', arch, gcc, gxx, add_gcc_flags_to_env, add_darwin_flags_to_env)
				else:
					conf.create_gcc_env(version, toolchaindir, target, 'iphone', arch, gcc, gxx, add_gcc_flags_to_env, add_darwin_simulator_flags_to_env)

def setup(conf):
	pass

def build(bld):
	mak.allplatforms['iphone'] = ['iphone', 'darwin']

def platformbuild(bld):
	pass

def plugins(bld):
	pass

@feature('cshlib', 'cxxshlib')
@after_method('apply_link')
def set_iphone_shlib_name(self):
	if 'iphone' in self.env.PLATFORM:
		self.env.append_unique('LINKFLAGS', ['-install_name', os.path.join('@executable_path', self.env.DEPLOY['plugin'], self.link_task.outputs[0].name)])
