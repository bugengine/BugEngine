# set Metro specific options

import os
import mak
from waflib import Context, Errors
from waflib.Logs import info,warn,pprint
from waflib.TaskGen import feature, before_method, after_method

# adds MSVC vars to environment
def add_msvc_metro_to_env(conf, compiler, version, target):
	conf.env['MSVC_VERSIONS'] = [compiler+' '+version]
	conf.env['MSVC_TARGETS'] = [target]
	conf.load('msvc')

	conf.env['CFLAGS'] = ['/DWINAPI_FAMILY=WINAPI_FAMILY_APP'] + ['/AI%s'%p for p in conf.env.LIBPATH]
	conf.env['CXXFLAGS'] = ['/ZW', '/DWINAPI_FAMILY=WINAPI_FAMILY_APP'] + ['/AI%s'%p for p in conf.env.LIBPATH]
	conf.env['LINKFLAGS'] = ['/MANIFEST:NO', '/APPCONTAINER', '/WINMD:NO']
	conf.env['CFLAGS_warnall'] = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W4', '/WX']
	conf.env['CFLAGS_warnnone'] = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W0']
	conf.env['CXXFLAGS_warnall'] = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W4', '/WX']
	conf.env['CXXFLAGS_warnnone'] = ['/D_CRT_SECURE_NO_WARNINGS=1', '/W0']

	conf.env['CFLAGS_debug'] = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG']
	conf.env['CXXFLAGS_debug'] = ['/Od', '/Ob1', '/EHsc', '/RTC1', '/RTCc', '/Zi', '/MTd', '/D_DEBUG', '/GR']
	conf.env['LINKFLAGS_debug'] = ['/DEBUG']

	conf.env['CFLAGS_profile'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['CXXFLAGS_profile'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['LINKFLAGS_profile'] = ['/DEBUG']

	conf.env['CFLAGS_final'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['CXXFLAGS_final'] = ['/DNDEBUG', '/MT', '/Ox', '/Ob2', '/Oi', '/Ot', '/Oy', '/GT', '/GL', '/GF', '/FD', '/GS-', '/Gy', '/GR-']
	conf.env['LINKFLAGS_final'] = ['/DEBUG']


def add_win32_metro_flags_to_env(conf, name, arch):
	conf.env['PLATFORM'] = mak.allplatforms['metro']
	conf.env['ABI'] = 'pe'
	conf.env['library_PATTERN'] = '%s.lib'
	conf.env['shlib_PATTERN']	= '%s.dll'
	conf.env['program_PATTERN'] = '%s.exe'
	if conf.env['CC_NAME'] == 'gcc':
		if arch in ['amd64', 'x64', 'x86_64']:
			conf.env['WINRCFLAGS'].append('--target=pe-x86-64')
		else:
			conf.env['WINRCFLAGS'].append('--target=pe-i386')

	conf.env.append_unique('DEFINES', ['BE_PLATFORM=platform_metro', 'METRO', '_METRO', '_METRO_', '__METRO__'])
	if arch in ['amd64', 'x64', 'x86_64']:
		conf.env.append_unique('DEFINES', ['_WIN64'])
	conf.env['PREFIX']			= os.path.abspath(os.path.join('build', name))
	conf.env['DEPLOY']			= { 'prefix':	'',
									'bin':		'',
									'etc':		'conf',
									'runbin':	'',
									'api':		os.path.join('dev','include'),
									'lib':		os.path.join('dev','lib'),
									'data':		'data',
									'plugin':	os.path.join('data', 'plugins'),
									'kernel':	os.path.join('data', 'kernels') }
	conf.env.KERNELS = [conf.env.ENVNAME]


def options(opt):
	pass

def configure(conf):
	from waflib import Options
	mak.allplatforms['metro'] = ['metro']
	for (compiler, version, target, platform, tname) in conf.env['MSVC_TARGETS']:
		if platform == 'win32':
			v = float(version.split('.')[0])
			if v >= 11.0:
				name = '%s-%s-%s-%s' %('metro', target, compiler, version)
				conf.setenv(name, conf.env.derive())
				try:
					conf.env.ENVNAME = name
					add_msvc_metro_to_env(conf, compiler, version, target)
					add_win32_metro_flags_to_env(conf, name, tname)
					conf.recurse(os.path.join('..', '..', 'mak', 'target', 'archs', tname), once=False)
					conf.recurse(os.path.join('..', '..', 'mak', 'libs'), once=False)

					pprint('GREEN', 'configure for tool %s' % name)
					conf.variant = ''
					conf.env['BUILD_VARIANTS'].append(name)
				except Exception as e:
					warn('msvc not available: '+str(e))
					conf.variant = ''


def setup(conf):
	pass

def build(bld):
	mak.allplatforms['metro'] = ['metro']

def platformbuild(bld):
	pass

def plugins(bld):
	pass

