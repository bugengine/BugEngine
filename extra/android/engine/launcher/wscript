from waflib.TaskGen import feature, before_method, after_method, extension
from waflib import Context, Logs, Task, Node, Build, Utils, Errors
import os

DEX_RE = '**/*.class'

def build_file_list(node, path = ''):
	if os.path.isdir(node.abspath()):
		result = []
		for n in node.listdir():
			result += build_file_list(node.make_node(n), os.path.join(path, n))
		return result
	else:
		return [path]

def post_run(bld):
	destination_directory = bld.srcnode.make_node(os.path.join(bld.env.PREFIX, bld.optim, bld.env.DEPLOY_ROOTDIR))
	appname = getattr(Context.g_module, Context.APPNAME, bld.srcnode.name)
	package_name = appname + '.apk'
	Logs.pprint('GREEN', 'Packaging application %s'%package_name)
	original = bld.bldnode.make_node('resources.apk')
	destination = bld.bldnode.make_node('package.apk')
	files = build_file_list(destination_directory)
	destination.write(original.read())
	command = [bld.env.AAPT, 'add', destination.abspath()] + files
	p = Utils.subprocess.Popen(command,
			cwd=destination_directory.abspath(),
			stdin=Utils.subprocess.PIPE,
			stdout=Utils.subprocess.PIPE,
			stderr=Utils.subprocess.PIPE)
	out = p.communicate()[0]
	if p.returncode != 0:
		print(out.decode('utf-8'))
		raise Errors.WafError('failed to create Android package')

	command = [bld.env.JARSIGNER] + bld.env.JARSIGNER_FLAGS + [
		'-signedjar',
		destination_directory.parent.make_node(package_name).abspath(),
		destination.abspath(),
		'androiddebugkey']
	p = Utils.subprocess.Popen(command,
			stdin=Utils.subprocess.PIPE,
			stdout=Utils.subprocess.PIPE,
			stderr=Utils.subprocess.PIPE)
	out = p.communicate()[0]
	if p.returncode != 0:
		print(out.decode('utf-8'))
		raise Errors.WafError('failed to sign Android package')


class aapt_create(Task.Task):
	"""
	Create an apk file
	"""
	color   = 'PINK'
	run_str = '${AAPT} package ${AAPT_FLAGS} -M ${MANIFEST} -S ${RESOURCE_PATH} -F ${TGT}'

class dex_create(Task.Task):
	"""
	Create a dex file
	"""
	color   = 'GREEN'
	run_str = '${JAVA} -jar ${DEX} ${DEXCREATE} ${DEX_TGT_PATTERN:OUTPUT_FILES} ${DEXOPTS} ${INPUT_FILES}'

	def runnable_status(self):
		"""
		Wait for dependent tasks to be executed, then read the
		files to update the list of inputs.
		"""
		for t in self.run_after:
			if not t.hasrun:
				return Task.ASK_LATER
		if not self.inputs:
			global DEX_RE
			try:
				self.inputs = [x for x in self.outdir.ant_glob(DEX_RE, remove=False) if id(x) != id(self.outputs[0])]
				self.env.INPUT_FILES = [x.path_from(self.basedir) for x in self.inputs]
				self.env.OUTPUT_FILES = [x.path_from(self.basedir) for x in self.outputs]
			except Exception:
				raise Errors.WafError('Could not find the basedir %r for %r' % (self.basedir, self))
		return super(dex_create, self).runnable_status()

@feature('aapt_resource')
def aapt_resource(self):
	self.resource_task = tsk = self.create_task('aapt_create', self.resource.ant_glob('**/*'), [self.destfile])
	tsk.env.MANIFEST = self.manifest.abspath()
	tsk.env.RESOURCE_PATH = self.resource.abspath()

@feature('dex')
@after_method('apply_java')
@before_method('process_source')
def dex_files(self):
	"""
	Create a dex task. There can be only one dex task by task generator.
	"""
	destfile = self.destfile
	dexopts = getattr(self, 'dexopts', [])
	basedir = self.basedir
	outdir = self.outdir

	self.dex_task = tsk = self.create_task('dex_create')
	if not isinstance(destfile, Node.Node):
		destfile = self.path.find_or_declare(destfile)
	if not destfile:
		self.bld.fatal('invalid destfile %r for %r' % (destfile, self))
	tsk.set_outputs(destfile)
	tsk.basedir = basedir
	tsk.outdir = outdir
	tsk.cwd = outdir.abspath()

	if getattr(self, 'javac_task', None):
		tsk.set_run_after(self.javac_task)

def build(bld):
	if bld.is_install == Build.INSTALL:
		bld.add_post_fun(post_run)

	source_node = bld.path.make_node('src')
	resource_node = bld.path.make_node('res')
	launcher = bld(target = 'engine.android.launcher',
				   features=['cxx', 'javac', 'dex'],
				   source_nodes = [source_node, resource_node],
				   destfile='classes.dex',
				   outdir=source_node.find_or_declare('jar'),
				   basedir=source_node.find_or_declare('jar'))

	resources = bld(target = 'engine.android.resource',
				   features=['aapt_resource'],
				   resource=resource_node,
				   destfile=bld.bldnode.find_or_declare('resources.apk'),
				   manifest=source_node.make_node('AndroidManifest.xml'))
	outdir = os.path.join(bld.env.PREFIX, bld.optim, bld.env.DEPLOY_ROOTDIR)
	bld.install_files(outdir, bld.path.find_or_declare(launcher.destfile))


