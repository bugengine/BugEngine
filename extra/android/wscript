# set Android specific options

import os
import re
import sys
from waflib import Configure, Context, Errors, Options


class AndroidPlatform(Configure.ConfigurationContext.Platform):
    NAME = 'android'

    def __init__(self, conf, ndk_root, sdk_root, version):
        Configure.ConfigurationContext.Platform.__init__(self)
        self.NAME = self.__class__.NAME + '_' + self.get_android_version(version)
        self.ndk_path = ndk_root
        self.sdk_path = sdk_root
        self.sdk_version = version

    def get_android_version(self, sdk_version):
        versions = {
            '1': '1.0',
            '2': '1.1',
            '3': 'Cupcake(1.5)',
            '4': 'Donut(1.6',
            '5': 'Eclair(2.0)',
            '6': 'Eclair(2.0.1)',
            '7': 'Eclair(2.1)',
            '8': 'Froyo(2.2)',
            '9': 'Gingerbread(2.3.2)',
            '10': 'Gingerbread(2.3.7)',
            '11': 'Honeycomb(3.0)',
            '12': 'Honeycomb(3.1)',
            '13': 'Honeycomb(3.2)',
            '14': 'IceCreamSandwich(4.0)',
            '15': 'IceCreamSandwich(4.0.3)',
            '16': 'JellyBean(4.1)',
            '17': 'JellyBean(4.2)',
            '18': 'JellyBean(4.3)',
            '19': 'KitKat(4.4)',
            '20': 'KitKat(4.4W)',
            '21': 'Lollipop(5.0)',
            '22': 'Lollipop(5.1)',
            '23': 'Marshmallow(6.0)',
            '24': 'Nougat(7.0)',
            '25': 'Nougat(7.1)',
            '26': 'Oreo(8.0)',
            '27': 'Oreo(8.1)'
        }
        return versions.get(sdk_version, 'api'+sdk_version)

    def get_target_folder(self, arch):
        archs = {
            'mipsel': 'mips',
            'x86': 'x86',
            'armv7a': 'armeabi-v7a',
            'arm64': 'arm64-v8a',
            'mips64el': 'mips64',
            'amd64': 'x86_64'
        }
        return archs[arch]

    def get_android_arch(self, arch):
        archs = {
            'armv7a': 'arm',
            'amd64': 'x86_64',
            'mipsel': 'mips',
            'mips64el': 'mips64'
        }
        return archs.get(arch, arch)

    def load_in_env(self, conf, compiler):
        env = conf.env
        arch = compiler.arch
        target_folder = self.get_target_folder(arch)

        env.VALID_PLATFORMS = ['android']
        appname = getattr(Context.g_module, Context.APPNAME, conf.srcnode.name)
        env.cxxprogram_PATTERN = 'lib%s.so'
        env.append_unique('LINKFLAGS_cprogram', ['-shared'])
        env.append_unique('LINKFLAGS_cxxprogram', ['-shared'])
        env.LINK_WITH_PROGRAM = True
        env.STRIP_BINARY = True
        env.CFLAGS_cxxshlib = []
        env.CXXFLAGS_cxxshlib = []
        env.STATIC = True

        env.DEPLOY_ROOTDIR = appname
        env.DEPLOY_BINDIR = os.path.join('lib', )
        env.DEPLOY_RUNBINDIR = os.path.join('lib', target_folder)
        env.DEPLOY_LIBDIR = os.path.join('lib', target_folder)
        env.DEPLOY_INCLUDEDIR = 'include'
        env.DEPLOY_DATADIR = os.path.join('assets')
        env.DEPLOY_PLUGINDIR = os.path.join('lib', target_folder)
        env.DEPLOY_KERNELDIR = os.path.join('lib', target_folder)

        env.ANDROID_SDK = self.sdk_version
        env.ANDROID_SDK_PATH = self.sdk_path
        env.ANDROID_NDK_PATH = self.ndk_path
        for n in Options.options.android_ndk_path.split(','):
            if self.ndk_path.startswith(n):
                ndk_root = n
                break
        sysroot_options = []
        if os.path.isdir(os.path.join(n, 'sysroot')):
            sysroot_options += ['-isysroot', os.path.join(ndk_root, 'sysroot')]
            sysroot_options += ['-isystem', os.path.join(ndk_root, 'sysroot', 'usr', 'include', compiler.target)]

        env.ANDROID_ARCH = self.get_android_arch(arch)
        env.append_unique('JAVACFLAGS', ['-bootclasspath', os.path.join(self.sdk_path, 'android.jar')])
        env.append_unique('AAPTFLAGS', ['-I', os.path.join(self.sdk_path, 'android.jar')])

        if not os.path.isfile(os.path.join(self.ndk_path, '..', '..', 'prebuilt', 'android-%s'%env.ANDROID_ARCH, 'gdbserver', 'gdbserver')):
            raise Errors.WafError('could not find gdbserver for architecture %s' % env.ANDROID_ARCH)
        ndk_path = os.path.join(self.ndk_path, 'arch-%s'%env.ANDROID_ARCH)
        conf.env.SYSROOT = ndk_path

        conf.env.append_value('CFLAGS', ['--sysroot', ndk_path] + sysroot_options)
        conf.env.append_value('CXXFLAGS', ['--sysroot', ndk_path] + sysroot_options)
        conf.env.append_unique('LINKFLAGS', ['--sysroot', ndk_path])


class AndroidLoader(Configure.ConfigurationContext.Platform):
    NAME = 'android'

    def __init__(self, conf):
        self.conf = conf
        Configure.ConfigurationContext.Platform.__init__(self)

        conf.load('javaw')
        conf.env.append_value('JAVACFLAGS', ['-source', '1.6', '-target', '1.6'])
        conf.find_program('jarsigner', var='JARSIGNER')
        key_debug = conf.path.make_node('debug.keystore')
        conf.env.JARSIGNER_FLAGS = ['-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', key_debug.abspath(), '-storepass', 'android', '-keypass', 'android']
        conf.env.JARSIGNER_KEY = 'androiddebugkey'

        sdk_build_tool_path = self.get_build_tool_path(Options.options.android_sdk_path)
        sdk_tools_paths = self.get_tools_paths(Options.options.android_sdk_path)
        adb = conf.find_program('adb', path_list=sdk_tools_paths)
        conf.find_program('dx', var='DEX', exts='.jar', path_list=[os.path.join(sdk_build_tool_path, 'lib')])
        conf.find_program('zipalign', var='ZIPALIGN', path_list=sdk_tools_paths+[sdk_build_tool_path])
        conf.env.DEXCREATE = '--dex'
        conf.env.DEX_TGT_PATTERN = '--output=%s'
        conf.find_program('aapt', path_list=[sdk_build_tool_path])

    def get_tools_paths(self, android_path):
        return [os.path.join(android_path, 'platform-tools'), os.path.join(android_path, 'tools')]

    def get_build_tool_path(self, android_path):
        sdk_tools_path = os.path.join(android_path, 'build-tools')
        if os.path.isdir(sdk_tools_path):
            sdk_tools = sorted(os.listdir(sdk_tools_path))
            if sdk_tools:
                sdk_tool = sdk_tools[-1]
                return os.path.join(sdk_tools_path, sdk_tool)
        raise Errors.WafError('Android build-tools not installed')

    def get_android_arch(self, arch):
        archs = {
            'armv7a': 'arm',
            'amd64': 'x86_64',
            'mipsel': 'mips',
            'mips64el': 'mips64'
        }
        return archs.get(arch, arch)

    def find_android_sdk(self, ndk_path, sdk_path, archs):
        import re
        def alphanum_key(s):
            def tryint(s):
                try:
                    return int(s)
                except Exception:
                    return s
            return [tryint(c) for c in re.split('([0-9]+)', s)]

        def valid_archs(platform_ndk, platform, archs):
            result = []
            for arch in archs:
                a = self.get_android_arch(arch)
                p = os.path.join(platform_ndk, platform, 'arch-%s'%a)
                if os.path.isdir(p):
                    result.append(arch)
            return result

        def ndk_of_sdk(sdk, ndks):
            try:
                sdk_number = int(sdk.split('-')[1])
                ndk_numbers = sorted([(n[0], n[1]) for n in ndks if n[0] <= sdk_number], key = lambda x: (len(x[1]), x[0]))
                return 'android-%d'%ndk_numbers[-1][0]
            except:
                if sdk in ndks:
                    return sdk

        all_ndk_sdks = []
        platforms_ndk = os.path.join(ndk_path, 'platforms')
        for p in os.listdir(platforms_ndk):
            if os.path.isdir(os.path.join(platforms_ndk, p)):
                all_ndk_sdks.append((int(p.split('-')[1]), valid_archs(platforms_ndk, p, archs)))

        all_sdk_sdks = []
        platforms_sdk = os.path.join(sdk_path, 'platforms')
        all_sdk_sdks = [p for p in os.listdir(platforms_sdk)]
        sdk_pairs = [(i, ndk_of_sdk(i, all_ndk_sdks)) for i in all_sdk_sdks]
        sdk_pairs = [(i, j) for i,j in sdk_pairs if j]
        if sdk_pairs:
            sdk_pairs = sorted(sdk_pairs, key=lambda x: alphanum_key(x[0]))
            sdk, ndk = sdk_pairs[0]
            prefered_sdk = Options.options.android_sdk
            if prefered_sdk:
                if 'android-%s'%prefered_sdk in all_sdk_sdks:
                    sdk = 'android-%s'%prefered_sdk
                    ndk = dict(sdk_pairs)[sdk]
                else:
                    warn('could not find android SDK version %s in path %s; using %s'%(favorite_sdk, path, sdk))
            return (os.path.join(platforms_ndk, ndk),
                    os.path.join(platforms_sdk, sdk),
                    valid_archs(platforms_ndk, ndk, archs),
                    sdk.split('-')[1])
        else:
            raise Errors.WafError('no SDK for archs')

    def get_available_compilers(self, compiler_list):
        result = []
        compiler_sets = {}
        for c in compiler_list:
            for ndk_path in Options.options.android_ndk_path.split(','):
                if c.compiler_c.startswith(ndk_path):
                    c_name = c.NAMES[0].lower()
                    try:
                        subset = compiler_sets[c_name]
                    except KeyError:
                        subset = compiler_sets[c_name] = {}
                    k = (c.NAMES[0], c.version, ndk_path)
                    try:
                        subset[k].append(c)
                    except KeyError:
                        subset[k] = [c]
                    break

        # find all GCC targets
        seen = set([])
        all_gcc_compilers = sorted(compiler_sets['gcc'].items())
        for k, compilers in all_gcc_compilers:
            if (k[0], k[1]) in seen:
                continue
            archs = [c.arch for c in compilers]
            try:
                ndk_root, sdk_root, archs, sdk_version = self.find_android_sdk(k[2], Options.options.android_sdk_path, archs)
            except Errors.WafError as e:
                print(e)
                continue
            else:
                seen.add((k[0], k[1]))
                valid_compilers = [c for c in compilers if c.arch in archs]
                if len(valid_compilers) > 1:
                    result.append((valid_compilers[0], valid_compilers, AndroidPlatform(self.conf, ndk_root, sdk_root, sdk_version)))
                else:
                    result.append((valid_compilers[0], [], AndroidPlatform(self.conf, sdk_version)))
        return result


def options(opt):
    gr = opt.get_option_group('SDK paths and options')

    sdk_path = ''
    ndk_paths = []
    path_list = os.environ.get('PATH', '').split(os.pathsep)
    for path in path_list:
        for ext in ['.cmd', '.sh', '.bat', '']:
            p = os.path.join(path, 'adb'+ext)
            if os.path.isfile(p):
                sdk_path = os.path.dirname(os.path.dirname(p))
            p = os.path.join(path, 'android'+ext)
            if os.path.isfile(p):
                sdk_path = os.path.dirname(os.path.dirname(p))
            p = os.path.join(path, 'ndk-build'+ext)
            if os.path.isfile(p):
                ndk_paths.append(path)
    gr.add_option( '--android-sdk',
                    action='store',
                    default='',
                    dest='android_sdk',
                    help='Version of the Android SDK to target')
    gr.add_option( '--android-sdk-path',
                    action='store',
                    default=sdk_path,
                    dest='android_sdk_path',
                    help='Path to the root of the Android SDK (%s)' % (sdk_path or 'none detected'))
    gr.add_option( '--android-ndk-path',
                    action='store',
                    default=','.join(ndk_paths),
                    dest='android_ndk_path',
                    help='Path to the root of the Android NDK (%s)' % (ndk_paths or 'none detected'))


def host_configure(conf):
    ndk_paths = Options.options.android_ndk_path.split(',')
    if ndk_paths:
        compiler_paths = []
        for ndk_path in ndk_paths:
            toolchains_path = os.path.join(ndk_path, 'toolchains')
            if os.path.isdir(toolchains_path):
                for toolchain in os.listdir(toolchains_path):
                    toolchain_path = os.path.join(toolchains_path, toolchain, 'prebuilt')
                    if os.path.isdir(toolchain_path):
                        for platform in os.listdir(toolchain_path):
                            compiler_paths.append(os.path.join(toolchain_path, platform, 'bin'))
        conf.env.append_unique('EXTRA_PATH', compiler_paths)


def configure(conf):
    if not Options.options.android_sdk_path or not Options.options.android_ndk_path:
        return
    conf.start_msg('Checking for Android tools')
    try:
        conf.platforms.append(AndroidLoader(conf))
    except Errors.WafError as e:
        conf.end_msg(str(e), color='YELLOW')
    else:
        conf.end_msg('done')

def build(bld):
    bld.recurse('mak/build.py')
    bld.recurse('src/build.py')


def plugins(bld):
    bld.recurse('src/build.py')

