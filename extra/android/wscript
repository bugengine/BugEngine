#! /usr/bin/env python
# set Android specific options

import os
from waflib import Options
from be_typing import TYPE_CHECKING


def options(option_context):
    # type: (Options.OptionsContext) -> None
    option_group = option_context.get_option_group('SDK paths and options')

    sdk_path = ''
    ndk_paths = []
    path_list = os.environ.get('PATH', '').split(os.pathsep)
    for path in path_list:
        for ext in ['.exe', '.cmd', '.sh', '.bat', '']:
            p = os.path.join(path, 'adb'+ext)
            if os.path.isfile(p):
                sdk_path = os.path.dirname(os.path.dirname(p))
            p = os.path.join(path, 'sdkmanager'+ext)
            if os.path.isfile(p):
                sdk_path = os.path.dirname(os.path.dirname(os.path.dirname(p)))
                ndk_path = os.path.join(sdk_path, 'ndk-bundle')
                if os.path.isdir(ndk_path) and ndk_path not in ndk_paths:
                    ndk_paths.append(ndk_path)
            p = os.path.join(path, 'android'+ext)
            if os.path.isfile(p):
                sdk_path = os.path.dirname(os.path.dirname(p))
                ndk_path = os.path.join(sdk_path, 'ndk-bundle')
                if os.path.isdir(ndk_path) and ndk_path not in ndk_paths:
                    ndk_paths.append(ndk_path)
            p = os.path.join(path, 'ndk-build'+ext)
            if os.path.isfile(p):
                ndk_paths.append(path)
    option_group.add_option('--android-sdk',
                            action='store',
                            default='all',
                            dest='android_sdk',
                            help='Version of the Android SDK to target')
    option_group.add_option('--android-sdk-path',
                            action='store',
                            default=sdk_path,
                            dest='android_sdk_path',
                            help='Path to the root of the Android SDK (%s)' % (sdk_path or 'none detected'))
    option_group.add_option('--android-ndk-path',
                            action='store',
                            default=','.join(ndk_paths),
                            dest='android_ndk_path',
                            help='Path to the root of the Android NDK (%s)' % (ndk_paths or 'none detected'))
    option_context.recurse('mak/device.py')


def host_configure(configuration_context):
    ndk_paths = Options.options.android_ndk_path.split(',')
    if ndk_paths:
        compiler_paths = []
        for ndk_path in ndk_paths:
            ndk_path = os.path.normpath(os.path.abspath(ndk_path))
            toolchains_path = os.path.join(ndk_path, 'toolchains')
            if os.path.isdir(toolchains_path):
                for toolchain in os.listdir(toolchains_path):
                    toolchain_path = os.path.join(toolchains_path, toolchain, 'prebuilt')
                    if os.path.isdir(toolchain_path):
                        for platform in os.listdir(toolchain_path):
                            if os.path.isdir(os.path.join(toolchain_path, platform, 'bin')):
                                compiler_paths.append(os.path.join(toolchain_path, platform, 'bin'))
        configuration_context.env.append_unique('EXTRA_PATH', compiler_paths)


def configure(configuration_context):
    # type: (Configure.ConfigurationContext) -> None
    configuration_context.recurse('mak/configure.py')


def setup(configuration_context):
    # type: (Configure.ConfigurationContext) -> None
    configuration_context.recurse('mak/setup.py')


def build(build_context):
    # type: (Build.BuildContext) -> None
    build_context.recurse('mak/build.py')
    build_context.recurse('src/build.py')


def deploy(build_context):
    # type: (Build.BuildContext) -> None
    build_context.recurse('mak/deploy.py')


def run(build_context):
    # type: (Build.BuildContext) -> None
    build_context.recurse('mak/run.py')


def debug(build_context):
    # type: (Build.BuildContext) -> None
    build_context.recurse('mak/debug.py')


if TYPE_CHECKING:
    from waflib import Configure, Build