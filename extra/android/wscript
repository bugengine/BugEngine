# set Android specific options

import os, sys
from waflib import Context, Errors, Options, Utils, Logs
from waflib.Logs import info,warn,pprint
from waflib.Configure import conf
from waflib.TaskGen import feature

def get_android_version(sdk_version):
    versions = {
        '1': '1.0',
        '2': '1.1',
        '3': '1.5',
        '4': '1.6',
        '5': '2.0',
        '6': '2.0.1',
        '7': '2.1',
        '8': '2.2',
        '9': '2.3.2',
        '10': '2.3.7',
        '11': '3.0',
        '12': '3.1',
        '13': '3.2',
        '14': '4.0',
        '15': '4.0.3',
        '16': '4.1',
        '17': '4.2',
        '18': '4.3',
		'19': '4.4',
        '21': '5.0',
		'L':  'L'
    }
    return versions.get(sdk_version, sdk_version)

has_tegra_support = False
def options(opt):
    gr = opt.get_option_group('SDK paths and options')

    sdk_path = ''
    ndk_path = []
    path_list = os.environ.get('PATH', '').split(os.pathsep)
    for path in path_list:
            for ext in ['.cmd', '.sh', '.bat', '']:
                p = os.path.join(path, 'android'+ext)
                if os.path.isfile(p):
                    sdk_path = os.path.dirname(path)
                p = os.path.join(path, 'ndk-build'+ext)
                if os.path.isfile(p):
                    ndk_path.append(path)


    gr.add_option( '--android-sdk',
                    action='store',
                    default='',
                    dest='android_sdk',
                    help='Version of the Android SDK to target')
    gr.add_option( '--android-sdk-path',
                    action='store',
                    default=sdk_path,
                    dest='android_sdk_path',
                    help='Path to the root of the Android SDK')
    gr.add_option( '--android-ndk-path',
                    action='store',
                    default=','.join(ndk_path),
                    dest='android_ndk_path',
                    help='Path to the root of the Android NDK')

    visualstudio = sys.modules['visualstudio']
    for config, versions in (
            ('10.0_Config', [visualstudio.vs2010]),
            ('11.0_Config', [visualstudio.vs2012, visualstudio.vs11]),
            ('12.0_Config', [visualstudio.vs2013]),
        ):
        try:
            try:
                key = Utils.winreg.OpenKey(Utils.winreg.HKEY_CURRENT_USER, 'SOFTWARE\\Wow6432node\\Microsoft\\VisualStudio\\%s\\InstalledProducts\\AndroidPackage' % config)
            except:
                key = Utils.winreg.OpenKey(Utils.winreg.HKEY_CURRENT_USER, 'SOFTWARE\\Microsoft\\VisualStudio\\%s\\InstalledProducts\\AndroidPackage' % config)
        except:
            pass
        else:
            for kls in versions:
                global has_tegra_support
                kls.platforms.append('Tegra-Android')
                has_tegra_support = True


def get_android_arch(arch):
    archs = {
        'mipsel': 'mips',
		'aarch64': 'arm64',
		'mips64el': 'mips64'
    }
    return archs.get(arch, arch)


def get_target_folder(arch):
    archs = {
        'mipsel': 'mips',
        'x86': 'x86',
        'arm': 'armeabi-v7a',
		'aarch64': 'arm64-v8a',
		'mips64el': 'mips64',
		'x86_64': 'x86_64'
    }
    return archs[arch]


def find_android_gcc_toolchain(path, arch):
    try:
        path,bin = os.path.split(path)
        path,host = os.path.split(path)
        path,prebuilt = os.path.split(path)
        path,toolchain = os.path.split(path)
        path,_ = os.path.split(path)
        while _:
            toolchain_dir = os.path.join(path, 'toolchains')
            if os.path.isdir(toolchain_dir):
                all_toolchains = os.listdir(toolchain_dir)
                valid_toolchains = [t for t in all_toolchains if t.startswith('%s-'%arch)]
                valid_gcc_toolchains = []
                for t in sorted(valid_toolchains):
                    if os.path.isdir(os.path.join(toolchain_dir, t, 'prebuilt', host)):
                        for bindir in os.listdir(os.path.join(toolchain_dir, t, 'prebuilt', host)):
                            if os.path.isdir(os.path.join(toolchain_dir, t, 'prebuilt', host, bindir, 'bin')):
                                valid_gcc_toolchains.append((t, bindir))
                if valid_gcc_toolchains:
                    selected_toolchain, bindir = valid_gcc_toolchains[-1]
                    return os.path.join(toolchain_dir, selected_toolchain, 'prebuilt', host), bindir
            path,_ = os.path.split(path)
    except Exception as e:
        print(e)
    return None,None


def find_android_sdk(ndk_path, sdk_path, archs):
    import re
    def alphanum_key(s):
        def tryint(s):
            try:
                return int(s)
            except Exception:
                return s
        return [tryint(c) for c in re.split('([0-9]+)', s)]

    def all_archs(platform_ndk, platform, archs):
        good = True
        for arch in archs:
            arch = get_android_arch(arch)
            good = good and os.path.isdir(os.path.join(platform_ndk, platform, 'arch-%s'%arch))
        return good
    def ndk_of_sdk(sdk, ndks):
        try:
            sdk_number = int(sdk.split('-')[1])
            ndk_numbers = sorted([int(n.split('-')[1]) for n in ndks])
            element = ndk_numbers.pop(-1)
            while element > sdk_number:
                element = ndk_numbers.pop(-1)
            return 'android-%d'%element
        except:
            if sdk in ndks:
                return sdk

    ndk_path,_ = os.path.split(ndk_path)
    while _:
        platforms_ndk = os.path.join(ndk_path, 'platforms')
        if os.path.isdir(platforms_ndk):
            all_ndk_sdks = [p for p in os.listdir(platforms_ndk) if all_archs(platforms_ndk, p, archs)]
            if all_ndk_sdks:
                break
        ndk_path,_ = os.path.split(ndk_path)
    sdk_path,_ = os.path.split(sdk_path)
    all_sdk_sdks = []
    while _:
        platforms_sdk = os.path.join(sdk_path, 'platforms')
        if os.path.isdir(platforms_sdk):
            all_sdk_sdks = [p for p in os.listdir(platforms_sdk)]
            if all_sdk_sdks:
                break
        sdk_path,_ = os.path.split(sdk_path)
    sdk_pairs = [(i, ndk_of_sdk(i, all_ndk_sdks)) for i in all_sdk_sdks]
    sdk_pairs = [(i, j) for i,j in sdk_pairs if j]
    if sdk_pairs:
        sdk_pairs = sorted(sdk_pairs, key=lambda x: alphanum_key(x[0]))
        sdk,ndk = sdk_pairs[-1]
        from waflib import Options
        favorite_sdk = Options.options.android_sdk
        if favorite_sdk:
            if 'android-%s'%favorite_sdk in all_sdk_sdks:
                sdk = 'android-%s'%favorite_sdk
                ndk = dict(sdk_pairs)[sdk]
            else:
                warn('could not find android SDK version %s in path %s; using %s'%(favorite_sdk, path, sdk))
        return (os.path.join(platforms_ndk, ndk),
                os.path.join(platforms_sdk, sdk),
                sdk.split('-')[1])


@conf
def set_android_gcc_options(conf, options, arch, version):
    v = conf.env
    v.DEST_BINFMT = 'elf'
    v.append_unique('CFLAGS', ['-fPIC'])
    v.append_unique('CXXFLAGS', ['-fPIC'])
    v.append_unique('LINKFLAGS', ['-Wl,-z,defs', '-llog'])

    version = version.split('.')
    version = float(version[0]) + float(version[1])/10

    v.CFLAGS_warnnone = ['-w']
    v.CXXFLAGS_warnnone = ['-w']
    v.CFLAGS_warnall = ['-std=c99', '-Wall', '-Wextra', '-pedantic', '-Winline', '-Werror']
    v.CXXFLAGS_warnall = ['-Wall', '-Wextra', '-Werror', '-Wno-sign-compare', '-Woverloaded-virtual', '-Wno-invalid-offsetof', '-Wno-unused-variable']
    if version >= 4.8:
        v.append_unique('CXXFLAGS_warnall', ['-Wno-unused-local-typedefs'])

    v.CFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
    v.CXXFLAGS_debug = ['-pipe', '-g', '-D_DEBUG', '-fno-exceptions']
    v.ASFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
    v.LINKFLAGS_debug = ['-pipe', '-g']

    v.CFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.CXXFLAGS_profile = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
    v.ASFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.LINKFLAGS_profile = ['-pipe', '-g']

    v.CFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.CXXFLAGS_final = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
    v.ASFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.LINKFLAGS_final = ['-pipe', '-g']


    if arch == 'x86_64':
        conf.env.append_unique('CFLAGS', ['-mstackrealign', '-msse3', '-mfpmath=sse', '-m64'])
        conf.env.append_unique('CXXFLAGS', ['-mstackrealign', '-msse3', '-mfpmath=sse', '-m64'])
        conf.env.append_unique('LINKFLAGS', ['-mstackrealign', '-msse3', '-mfpmath=sse', '-m64'])
    if arch == 'x86':
        conf.env.append_unique('CFLAGS', ['-march=i686', '-mtune=atom', '-mstackrealign', '-msse3', '-mfpmath=sse', '-m32'])
        conf.env.append_unique('CXXFLAGS', ['-march=i686', '-mtune=atom', '-mstackrealign', '-msse3', '-mfpmath=sse', '-m32'])
        conf.env.append_unique('LINKFLAGS', ['-march=i686', '-mtune=atom', '-mstackrealign', '-msse3', '-mfpmath=sse', '-m32'])
    if arch.startswith('arm'):
        conf.env.append_unique('CFLAGS', ['-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16'])
        conf.env.append_unique('CXXFLAGS', ['-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16'])
        conf.env.append_unique('LINKFLAGS', ['-march=armv7-a', '-Wl,--fix-cortex-a8'])


@conf
def set_android_clang_options(conf, flags, arch, version):
    v = conf.env
    v.DEST_BINFMT = 'elf'
    v.append_unique('CFLAGS', flags+['-fPIC'])
    v.append_unique('CXXFLAGS', flags+['-fPIC'])
    v.append_unique('LINKFLAGS', flags+['-Wl,-z,defs', '-llog'])

    v.CFLAGS_warnnone = ['-w']
    v.CXXFLAGS_warnnone = ['-w']
    v.CFLAGS_warnall = ['-std=c99', '-Wall', '-Wextra', '-pedantic', '-Winline', '-Werror']
    v.CXXFLAGS_warnall = ['-Wall', '-Wextra', '-Werror', '-Wno-sign-compare', '-Woverloaded-virtual', '-Wno-invalid-offsetof']

    v.CFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
    v.CXXFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
    v.ASFLAGS_debug = ['-pipe', '-g', '-D_DEBUG']
    v.LINKFLAGS_debug = ['-pipe', '-g']

    v.CFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.CXXFLAGS_profile = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
    v.ASFLAGS_profile = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.LINKFLAGS_profile = ['-pipe', '-g']

    v.CFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.CXXFLAGS_final = ['-pipe', '-Wno-unused-parameter', '-g', '-DNDEBUG', '-O3', '-fno-rtti', '-fno-exceptions']
    v.ASFLAGS_final = ['-pipe', '-g', '-DNDEBUG', '-O3']
    v.LINKFLAGS_final = ['-pipe', '-g']

    v.CFLAGS_cxxshlib = []
    v.CXXFLAGS_cxxshlib = []

    if arch == 'x86_64':
        conf.env.append_unique('CFLAGS', ['-mstackrealign', '-msse3', '-mfpmath=sse', '-m64'])
        conf.env.append_unique('CXXFLAGS', ['-mstackrealign', '-msse3', '-mfpmath=sse', '-m64'])
        conf.env.append_unique('LINKFLAGS', ['-mstackrealign', '-msse3', '-mfpmath=sse', '-m64'])
    if arch == 'x86':
        conf.env.append_unique('CFLAGS', ['-march=i686', '-mtune=atom', '-mstackrealign', '-msse3', '-m32'])
        conf.env.append_unique('CXXFLAGS', ['-march=i686', '-mtune=atom', '-mstackrealign', '-msse3', '-m32'])
        conf.env.append_unique('LINKFLAGS', ['-march=i686', '-mtune=atom', '-mstackrealign', '-msse3', '-m32'])
    if arch.startswith('arm'):
        conf.env.append_unique('CFLAGS', ['-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16'])
        conf.env.append_unique('CXXFLAGS', ['-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16'])
        conf.env.append_unique('LINKFLAGS', ['-march=armv7-a', '-Wl,--fix-cortex-a8'])


@conf
def set_android_sdk_options(conf, arch, ndk_path, sdk_path, sdk_version):
    conf.env.ANDROID_SDK = sdk_version
    conf.env.ANDROID_SDK_PATH = sdk_path
    conf.env.ANDROID_NDK_PATH = ndk_path
    conf.env.ANDROID_ARCH = get_android_arch(arch)
    conf.env.append_unique('CLASSPATH', [os.path.join(sdk_path, 'android.jar')])

    if not os.path.isfile(os.path.join(ndk_path, '..', '..', 'prebuilt', 'android-%s'%get_android_arch(arch), 'gdbserver', 'gdbserver')):
        raise Errors.WafError('could not find gdbserver for architecture %s' % get_android_arch(arch))
    ndk_path = os.path.join(ndk_path, 'arch-%s'%get_android_arch(arch))
    conf.env.SYSROOT = [ndk_path]
    conf.env.append_unique('CFLAGS', ['--sysroot', ndk_path])
    conf.env.append_unique('CXXFLAGS', ['--sysroot', ndk_path])
    conf.env.append_unique('LINKFLAGS', ['--sysroot', ndk_path])


@conf
def set_android_options(conf, arch):
    conf.env.VALID_PLATFORMS = ['android']
    appname = getattr(Context.g_module, Context.APPNAME, conf.srcnode.name)
    conf.env.cxxprogram_PATTERN = 'lib%s.so'
    conf.env.append_unique('LINKFLAGS_cprogram', ['-shared'])
    conf.env.append_unique('LINKFLAGS_cxxprogram', ['-shared'])
    conf.env.LINK_WITH_PROGRAM = True
    conf.env.CFLAGS_cxxshlib = []
    conf.env.CXXFLAGS_cxxshlib = []
    conf.env.STATIC = True

    if has_tegra_support:
        conf.env.MS_PROJECT_PLATFORM = 'Tegra-Android'
        ndk = os.path.basename(conf.env.ANDROID_NDK_PATH)
        conf.env.MS_PROJECT_VARIABLES = [
                ('AndroidMinAPI', 'android-%s'%conf.env.ANDROID_SDK),
                ('AndroidTargetAPI', 'android-%s'%conf.env.ANDROID_SDK),
                ('AndroidMaxAPI', ''),
                ('AndroidArch', 'armv7-a'),
                ('OverrideAPKPath', '$(OutDir)$(Deploy_RootDir).apk'),
                ('BuildXmlPath', '$(SolutionDir)extra\\android'),
                ('AdditionalLibraryDirectories', ';'.join(['$(OutDir)$(Deploy_RootDir).dbg\\%s\\' % a for a in ['arm', 'mipsel', 'x86']] + ['$(AdditionalLibraryDirectories)'])),
                ('DebuggerFlavor', 'AndroidDebugger'),
                ('NdkPlatforms', '%s;%s' % (ndk,ndk)),
                ('AndroidManifestPath', '$(SolutionDir)extra\\android\\AndroidManifest.xml')
            ]
        conf.env.MS_PROJECT_IMPORT_PROPS = [
                #'$(VCTargetsPath)\\Platforms\\Tegra-Android\\Microsoft.Cpp.Tegra-Android.props'
            ]
        conf.env.MS_PROJECT_IMPORT_TARGETS = [
                '$(SolutionDir)\\extra\\android\\Nvidia.Cpp.Tegra-Android.DebugOnly.targets',
                '$(VCTargetsPath)\Platforms\$(Platform)\ImportAfter\*.targets'
            ]

    conf.env.DEPLOY_ROOTDIR = appname
    conf.env.DEPLOY_BINDIR = os.path.join('lib', get_target_folder(arch))
    conf.env.DEPLOY_RUNBINDIR = os.path.join('lib', get_target_folder(arch))
    conf.env.DEPLOY_LIBDIR = os.path.join('lib', get_target_folder(arch))
    conf.env.DEPLOY_INCLUDEDIR = 'include'
    conf.env.DEPLOY_DATADIR = os.path.join('assets')
    conf.env.DEPLOY_PLUGINDIR = os.path.join('lib', get_target_folder(arch))
    conf.env.DEPLOY_KERNELDIR = os.path.join('lib', get_target_folder(arch))


def get_tools_paths(android_path):
    return [os.path.join(android_path, 'platform-tools'), os.path.join(android_path, 'tools')]


def get_build_tool_path(android_path):
    sdk_tools_path = os.path.join(android_path, 'build-tools')
    if os.path.isdir(sdk_tools_path):
        sdk_tools = sorted(os.listdir(sdk_tools_path))
        if sdk_tools:
            sdk_tool = sdk_tools[-1]
            return os.path.join(sdk_tools_path, sdk_tool)
    raise Errors.WafError('Android build-tools not installed')


def host_configure(conf):
    ndk_paths = Options.options.android_ndk_path.split(',')
    if ndk_paths:
        compiler_paths = []
        for ndk_path in ndk_paths:
            toolchains_path = os.path.join(ndk_path, 'toolchains')
            if os.path.isdir(toolchains_path):
                for toolchain in os.listdir(toolchains_path):
                    toolchain_path = os.path.join(toolchains_path, toolchain, 'prebuilt')
                    if os.path.isdir(toolchain_path):
                        for platform in os.listdir(toolchain_path):
                            compiler_paths.append(os.path.join(toolchain_path, platform, 'bin'))
        conf.env.append_unique('EXTRA_PATH', compiler_paths)


def configure(conf):
    if not Options.options.android_sdk_path or not Options.options.android_ndk_path:
        return

    seen = set([])
    android_clang_archs = ['arm', 'mipsel', 'x86', 'aarch64', 'mips64el', 'x86_64']
    try:
        conf.load('javaw')
        conf.find_program('jarsigner', var='JARSIGNER')
        key_debug = conf.path.make_node('debug.keystore')
        conf.env.JARSIGNER_FLAGS = ['-keystore', key_debug.abspath(), '-storepass', 'android', '-keypass', 'android']
        conf.env.JARSIGNER_KEY = 'androiddebugkey'

        sdk_build_tool_path = get_build_tool_path(Options.options.android_sdk_path)
        sdk_tools_paths = get_tools_paths(Options.options.android_sdk_path)
        adb = conf.find_program('adb', path_list=sdk_tools_paths)
        conf.find_program('dx', var='DEX', exts='.jar', path_list=[os.path.join(sdk_build_tool_path, 'lib')])
        conf.find_program('zipalign', var='ZIPALIGN', path_list=sdk_tools_paths+[sdk_build_tool_path])
        conf.env.DEXCREATE = '--dex'
        conf.env.DEX_TGT_PATTERN = '--output=%s'
        conf.find_program('aapt', path_list=[sdk_build_tool_path])
    except Errors.WafError:
        return

    os_name = 'android'
    for version, directory, target, arch in conf.env.CLANG_TARGETS:
        if version in seen: continue

        android_toolchains = []
        android_archs = []

        compilers = []
        archs = []
        for real_arch in android_clang_archs:
            gcc, triple = find_android_gcc_toolchain(directory, real_arch)
            if gcc:
                compilers.append((gcc, triple, real_arch))
                archs.append(real_arch)
        if not compilers:
            continue

        seen.add(version)
        try:
            conf.start_msg('Looking for SDK')
            ndk_path, sdk_path, sdk_version = find_android_sdk(directory, adb, archs)
        except Exception as e:
            conf.end_msg('none', color='RED')
            continue
        conf.end_msg(sdk_version)

        for gcc, triple, real_arch in compilers:
            flags = ['-gcc-toolchain', gcc, '-target', triple]
            toolchain = '%s%s-%s-%s-%s'%(os_name, get_android_version(sdk_version), real_arch, 'clang', version)
            env = conf.env.derive()
            conf.setenv(toolchain, env)
            env.DEST_OS = 'android'
            try:
                conf.start_msg('Setting up compiler')
                conf.find_program(triple+'-ar', var='AR', path_list=[os.path.join(gcc, 'bin')])
                conf.find_program(triple+'-strip', var='STRIP', path_list=[os.path.join(gcc, 'bin')])
                conf.find_program(triple+'-gdb', var='GDB', path_list=[os.path.join(gcc, 'bin')])
                conf.load_clang(directory, target, flags)
                conf.set_android_clang_options(flags, real_arch, version)
            except Exception as e:
                conf.end_msg(e, color='RED')
                raise
            else:
                conf.end_msg('done')
                try:
                    conf.set_android_sdk_options(real_arch, ndk_path, sdk_path, sdk_version)
                    conf.set_android_options(real_arch)
                    conf.setenv(toolchain, conf.env.derive())
                    conf.env.KERNEL_TOOLCHAINS = [toolchain]
                    conf.env.ENV_PREFIX = real_arch
                    conf.add_toolchain(os_name+conf.env.ANDROID_SDK, real_arch, 'clang', version, real_arch, False)
                    sdk_number = conf.env.ANDROID_SDK
                except Errors.WafError as e:
                    conf.variant = ''
                    pprint('YELLOW', '%s failed: %s' % (toolchain, e))
                except Exception as e:
                    conf.variant = ''
                    pprint('RED', '%s failed: %s' % (toolchain, e))
                    raise
                else:
                    android_toolchains.append(toolchain)
                    android_archs.append(real_arch)
                    conf.variant = ''
        if android_toolchains:
            toolchain = '%s%s-%s-%s-%s'%(os_name, get_android_version(sdk_number), ','.join(android_archs), 'clang', version)
            env = conf.env.derive()
            conf.setenv(toolchain, env)
            conf.set_android_sdk_options('arm', ndk_path, sdk_path, sdk_version)
            conf.set_android_options('arm')
            conf.env.VALID_ARCHITECTURES = android_archs
            conf.env.SUB_TOOLCHAINS = android_toolchains
            conf.env.AAPT_FLAGS = ['-f', '-I', os.path.join(conf.env.ANDROID_SDK_PATH, 'android.jar')]
            conf.add_multiarch_toolchain(toolchain)
            pprint('GREEN', 'configured for toolchain %s' % (toolchain))

    gcc_targets = {}
    gcc_archs = { 'arm': 'arm',
                  'x86': 'x86',
                  'mipsel': 'mipsel',
                  'mips64el': 'mips64el',
                  'mipsel64': 'mips64el',
                  'arm64': 'aarch64',
                  'amd64': 'x86_64' }
    for name, bindir, gcc, gxx, version, target, arch, options in conf.env.GCC_TARGETS:
        position = target.find('android')
        if position != -1:
            try:
                gcc_targets['%s-%s' % (name, version)].append((name, bindir, gcc, gxx, version, target, arch, options))
            except KeyError:
                gcc_targets['%s-%s' % (name, version)] = [(name, bindir, gcc, gxx, version, target, arch, options)]
    for gcc_version, gcc_variables in gcc_targets.items():
        android_toolchains = []
        android_archs = []

        compilers = []
        archs = set([gcc_archs[x[6]] for x in gcc_variables if x[6] in gcc_archs])
        try:
            conf.start_msg('Looking for SDK')
            ndk_path, sdk_path, sdk_version = find_android_sdk(gcc_variables[0][1], adb, archs)
        except Exception as e:
            conf.end_msg('none', color='RED')
            continue
        conf.end_msg(sdk_version)

        seen = set([])
        for name, bindir, gcc, gxx, version, target, arch, options in gcc_variables:
            arch = gcc_archs[arch]
            if arch not in archs: continue
            if arch in seen: continue
            seen.add(arch)
            triple = '-'.join(os.path.basename(gcc).split('-')[0:3])
            toolchain = '%s%s-%s-%s-%s'%(os_name, get_android_version(sdk_version), arch, name, version)
            env = conf.env.derive()
            conf.setenv(toolchain, env)
            env.DEST_OS = 'android'
            try:
                conf.start_msg('Setting up compiler')
                conf.find_program(triple+'-ar', var='AR', path_list=[bindir])
                conf.find_program(triple+'-strip', var='STRIP', path_list=[bindir])
                conf.load_gcc(bindir, gcc, gxx, version, target, arch, options)
                conf.set_android_gcc_options(options, arch, version)
            except Exception as e:
                conf.end_msg(e, color='RED')
                raise
            else:
                conf.end_msg('done')
                try:
                    conf.set_android_sdk_options(arch, ndk_path, sdk_path, sdk_version)
                    conf.set_android_options(arch)
                    conf.setenv(toolchain, conf.env.derive())
                    conf.env.KERNEL_TOOLCHAINS = [toolchain]
                    conf.env.ENV_PREFIX = arch
                    conf.add_toolchain(os_name+conf.env.ANDROID_SDK, arch, name, version, arch, False)
                    sdk_number = conf.env.ANDROID_SDK
                except Errors.WafError as e:
                    conf.variant = ''
                    pprint('YELLOW', '%s failed: %s' % (toolchain, e))
                except Exception as e:
                    conf.variant = ''
                    pprint('RED', '%s failed: %s' % (toolchain, e))
                    raise
                else:
                    android_toolchains.append(toolchain)
                    android_archs.append(arch)
                    conf.variant = ''
        if android_toolchains:
            toolchain = '%s%s-%s-%s-%s'%(os_name, get_android_version(sdk_number), ','.join(android_archs), name, version)
            env = conf.env.derive()
            conf.setenv(toolchain, env)
            conf.set_android_sdk_options('arm', ndk_path, sdk_path, sdk_version)
            conf.set_android_options('arm')
            conf.env.VALID_ARCHITECTURES = android_archs
            conf.env.SUB_TOOLCHAINS = android_toolchains
            conf.env.AAPT_FLAGS = ['-f', '-I', os.path.join(conf.env.ANDROID_SDK_PATH, 'android.jar')]
            conf.add_multiarch_toolchain(toolchain)
            pprint('GREEN', 'configured for toolchain %s' % (toolchain))


def build(bld):
    bld.recurse('tasks')
    bld.recurse('src/build.py')


def plugins(bld):
    bld.recurse('launcher.py')


@feature('multiarch')
def apply_multiarch_android(self):
    if 'android' in self.env.VALID_PLATFORMS:
        for tg_name in self.use:
            task_gen = self.bld.get_tgen_by_name(tg_name)
            task_gen.post()
            if 'cxxshlib' in task_gen.features or 'cxxprogram' in task_gen.features:
                dbg_node = task_gen.link_task.outputs[0]
                out_node = dbg_node.parent.find_or_declare('stripped/%s'%dbg_node.name)
                strip_task = task_gen.create_task('strip', [dbg_node], [out_node])
                outdir = os.path.join(self.bld.env.PREFIX, self.bld.optim, task_gen.env.DEPLOY_BINDIR)
                outdir_dbg = os.path.join(self.bld.env.PREFIX, self.bld.optim, task_gen.env.DEPLOY_ROOTDIR+'.dbg', task_gen.env.ENV_PREFIX)
                self.bld.install_files(outdir, out_node)
                self.bld.install_files(outdir_dbg, dbg_node, package=False)

